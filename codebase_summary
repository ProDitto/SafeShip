{
  ".env.example": "- File Path: `.env.example`\n- High-Level Purpose: This file provides an example template for environment variables used to configure the application, including API server, PostgreSQL database, and MinIO object storage settings.\n- Definitions in the File:\n  - **Variables/Constants**:\n    - `API_PORT`: (string) Default port for the API server (e.g., `8080`).\n    - `POSTGRES_USER`: (string) PostgreSQL database username (e.g., `user`).\n    - `POSTGRES_PASSWORD`: (string) PostgreSQL database password (e.g., `password`).\n    - `POSTGRES_DB`: (string) PostgreSQL database name (e.g., `secure_supply_chain`).\n    - `DATABASE_URL`: (string) Full PostgreSQL connection string (e.g., `postgres://user:password@db:5432/secure_supply_chain?sslmode=disable`).\n    - `MINIO_ENDPOINT`: (string) MinIO server endpoint (e.g., `minio:9000`).\n    - `MINIO_ACCESS_KEY`: (string) MinIO access key (e.g., `minioadmin`).\n    - `MINIO_SECRET_KEY`: (string) MinIO secret key (e.g., `minioadmin`).\n    - `MINIO_USE_SSL`: (boolean) Whether to use SSL for MinIO (e.g., `false`).\n- Notable Patterns or Logic:\n  - Provides clear variable names and example values for local development setup.\n  - Includes placeholders for MinIO, indicating future integration or functionality.\n",
  ".gitignore": "- File Path: `.gitignore`\n- High-Level Purpose: This file specifies intentionally untracked files and directories that Git should ignore, preventing them from being committed to the repository.\n- Definitions in the File:\n  - **Ignored Patterns**:\n    - Binary files: `*.exe`, `*.dll`, `*.so`, `*.dylib`, `*.test`, `*.out`.\n    - Go-specific files: `vendor/` (commented out), `go.work`, `go.work.sum`.\n    - Environment files: `.env`.\n    - Docker-related files: `docker-compose.override.yml`, `docker-compose.local.yml`.\n    - Build output directories: `/build`, `/dist`.\n    - IDE-specific files: `.idea/`, `.vscode/`, `*.swp`, `*~`.\n",
  "Makefile": "- File Path: `Makefile`\n- High-Level Purpose: This Makefile provides a set of convenient commands for managing the Docker Compose-based development environment, including starting, stopping, viewing logs, and resetting the database.\n- Definitions in the File:\n  - **Targets**:\n    - `up`: Builds and starts all services defined in `docker-compose.yml` in detached mode.\n    - `down`: Stops and removes all services, networks, and volumes defined in `docker-compose.yml`.\n    - `logs`: Displays real-time logs for the `backend` service.\n    - `db-reset`: Stops all services, removes volumes (including database data), restarts only the database, waits for it to be ready, then restarts the backend, frontend, and MinIO services.\n- Notable Patterns or Logic:\n  - Uses `docker-compose` commands for service management.\n  - `db-reset` target includes a `sleep` command to allow the database to fully initialize before dependent services start.\n  - `.PHONY` declaration ensures targets are always run as commands, not as file names.\n",
  "backend/Dockerfile": "- File Path: `backend/Dockerfile`\n- High-Level Purpose: This Dockerfile defines the steps to build a Docker image for the Go backend application using a multi-stage build process for efficiency.\n- Definitions in the File:\n  - **Stages**:\n    - `builder`: Uses `golang:1.21-alpine` to download Go modules and build the `secure-image-service` binary.\n    - `final`: Uses `alpine:latest` as a base, copies the compiled binary from the `builder` stage, exposes port 8080, and sets the command to run the application.\n- Notable Patterns or Logic:\n  - **Multi-stage build**: Separates build environment from runtime environment to produce a smaller final image.\n  - **Dependency caching**: Copies `go.mod` and `go.sum` first to leverage Docker layer caching for dependencies.\n  - **Static compilation**: `CGO_ENABLED=0 GOOS=linux go build` ensures a statically linked binary suitable for Alpine.\n",
  "backend/cmd/server/main.go": "- File Path: `backend/cmd/server/main.go`\n- High-Level Purpose: This is the main entry point for the backend Go application, responsible for initializing the application's components, setting up dependencies, starting the HTTP server, and managing graceful shutdown.\n- Definitions in the File:\n  - **Functions**:\n    - `main()`: Public function.\n      - Signature: `func main()`\n      - Description:\n        1.  Loads environment variables from `.env` file (if present).\n        2.  Initializes the application logger.\n        3.  Loads application configuration.\n        4.  Establishes a connection pool to the PostgreSQL database.\n        5.  Initializes all repository implementations (PostgreSQL-backed).\n        6.  Initializes a mock build orchestrator.\n        7.  Initializes all use case implementations, injecting their respective repositories and orchestrators.\n        8.  Initializes the HTTP server with the configured handlers.\n        9.  Starts the HTTP server in a goroutine.\n        10. Waits for an interrupt or termination signal (SIGINT, SIGTERM).\n        11. Initiates a graceful shutdown of the HTTP server.\n- Notable Patterns or Logic:\n  - **Dependency Injection**: Manually wires up all components (repositories, use cases, handlers) at startup, demonstrating a form of explicit dependency management.\n  - **Configuration Management**: Uses `godotenv` for local `.env` files and `pkg/config` for structured configuration loading.\n  - **Logging**: Integrates `zerolog` for structured logging.\n  - **Database Management**: Establishes a `pgxpool` connection and ensures it's closed on exit.\n  - **Graceful Shutdown**: Implements a robust graceful shutdown mechanism using `context` and `os.Signal` to allow the server to finish active requests before exiting.\n  - **Modular Architecture**: Demonstrates how different layers (adapter, domain, usecase, repository) are brought together in the main application entry point.\n",
  "backend/go.mod": "- File Path: `backend/go.mod`\n- High-Level Purpose: This Go module file defines the module path and manages the direct and indirect dependencies required by the `secure-image-service` backend application.\n- Definitions in the File:\n  - **Module**: `secure-image-service`\n  - **Go Version**: `go 1.21`\n  - **Direct Dependencies**:\n    - `github.com/go-chi/chi/v5 v5.0.12`: HTTP router.\n    - `github.com/jackc/pgx/v5 v5.5.5`: PostgreSQL driver.\n    - `github.com/joho/godotenv v1.5.1`: Loads environment variables from `.env` files.\n    - `github.com/rs/zerolog v1.32.0`: Structured logger.\n  - **Indirect Dependencies**:\n    - Various `jackc` packages for PostgreSQL.\n    - `mattn` packages for console color/tty detection.\n    - `golang.org/x` packages for crypto, sync, sys, text.\n",
  "backend/internal/adapter/handler/http/build_handler.go": "- File Path: `backend/internal/adapter/handler/http/build_handler.go`\n- High-Level Purpose: This file defines HTTP handlers for build-related API endpoints, specifically for completing a previously initiated image build process.\n- Definitions in the File:\n  - **Structs**:\n    - `BuildHandler`: Handles HTTP requests related to image builds.\n      - Fields: `usecase` (*usecase.BuildUsecase).\n  - **Functions**:\n    - `NewBuildHandler(uc *usecase.BuildUsecase)`: Public function.\n      - Signature: `func NewBuildHandler(uc *usecase.BuildUsecase) *BuildHandler`\n      - Description: Constructor for `BuildHandler`, injecting a `BuildUsecase` dependency.\n    - `CompleteBuild(w http.ResponseWriter, r *http.Request)`: Public method on `BuildHandler`.\n      - Signature: `func (h *BuildHandler) CompleteBuild(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles POST requests to `/builds/{buildID}/complete`. It parses the build ID from the URL, decodes the build completion request payload, calls the `BuildUsecase` to finalize the build, and responds with the created image or an error.\n",
  "backend/internal/adapter/handler/http/customer_handler.go": "- File Path: `backend/internal/adapter/handler/http/customer_handler.go`\n- High-Level Purpose: This file defines HTTP handlers for customer-related API endpoints, translating HTTP requests into use case calls and formatting responses.\n- Definitions in the File:\n  - **Structs**:\n    - `CustomerHandler`: Handles HTTP requests related to customers.\n      - Fields: `usecase` (*usecase.CustomerUsecase).\n  - **Functions**:\n    - `NewCustomerHandler(uc *usecase.CustomerUsecase)`: Public function.\n      - Signature: `func NewCustomerHandler(uc *usecase.CustomerUsecase) *CustomerHandler`\n      - Description: Constructor for `CustomerHandler`, injecting a `CustomerUsecase` dependency.\n    - `ListCustomers(w http.ResponseWriter, r *http.Request)`: Public method on `CustomerHandler`.\n      - Signature: `func (h *CustomerHandler) ListCustomers(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles GET requests to list all customers, calls the `CustomerUsecase`, and responds with JSON or an error.\n    - `GetCustomer(w http.ResponseWriter, r *http.Request)`: Public method on `CustomerHandler`.\n      - Signature: `func (h *CustomerHandler) GetCustomer(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles GET requests for a specific customer by namespace (parsed from URL parameter), calls the `CustomerUsecase`, and responds with JSON, a 404 if not found, or an error.\n",
  "backend/internal/adapter/handler/http/image_handler.go": "- File Path: `backend/internal/adapter/handler/http/image_handler.go`\n- High-Level Purpose: This file defines HTTP handlers for image-related API endpoints, managing requests for listing, retrieving, and triggering builds for images. It also provides mocked data for SBOMs, CVEs, and verification.\n- Definitions in the File:\n  - **Structs**:\n    - `ImageHandler`: Handles HTTP requests related to images.\n      - Fields: `usecase` (*usecase.ImageUsecase).\n    - `CreateBuildRequest`: Represents the request payload for triggering a new image build.\n      - Fields: `TenantNamespace` (string).\n  - **Functions**:\n    - `NewImageHandler(uc *usecase.ImageUsecase)`: Public function.\n      - Signature: `func NewImageHandler(uc *usecase.ImageUsecase) *ImageHandler`\n      - Description: Constructor for `ImageHandler`, injecting an `ImageUsecase` dependency.\n    - `CreateBuild(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) CreateBuild(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles POST requests to trigger a new image build, validates the request, calls the `ImageUsecase`, and responds with JSON.\n    - `ListImages(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) ListImages(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles GET requests to list all images, calls the `ImageUsecase`, and responds with JSON or an error.\n    - `GetImage(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) GetImage(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles GET requests for a specific image by ID (parsed from URL parameter), calls the `ImageUsecase`, and responds with JSON, a 404 if not found, or an error.\n    - `GetImageSBOMs(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) GetImageSBOMs(w http.ResponseWriter, r *http.Request)`\n      - Description: Returns mocked SBOM data for a given image ID.\n    - `GetImageCVEs(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) GetImageCVEs(w http.ResponseWriter, r *http.Request)`\n      - Description: Returns mocked CVE data for a given image ID, with different mock data based on the ID.\n    - `GetImageVerification(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) GetImageVerification(w http.ResponseWriter, r *http.Request)`\n      - Description: Returns mocked verification data for a given image ID.\n    - `respondWithError(w http.ResponseWriter, code int, message string)`: Internal helper function.\n      - Signature: `func respondWithError(w http.ResponseWriter, code int, message string)`\n      - Description: Writes a JSON error response with the specified HTTP status code and message.\n    - `respondWithJSON(w http.ResponseWriter, code int, payload interface{})`: Internal helper function.\n      - Signature: `func respondWithJSON(w http.ResponseWriter, code int, payload interface{})`\n      - Description: Writes a JSON response with the specified HTTP status code and payload.\n- Notable Patterns or Logic:\n  - **Mocked Endpoints**: Several endpoints (`GetImageSBOMs`, `GetImageCVEs`, `GetImageVerification`) return hardcoded, mocked data, indicating future database integration.\n  - **Request/Response Handling**: Uses `encoding/json` for marshalling/unmarshalling and `github.com/go-chi/chi/v5` for URL parameter extraction.\n  - **Error Handling**: Centralized `respondWithError` and `respondWithJSON` helpers for consistent API responses.\n",
  "backend/internal/adapter/handler/http/server.go": "- File Path: `backend/internal/adapter/handler/http/server.go`\n- High-Level Purpose: This file defines the main HTTP server for the backend application, setting up the routing, applying global middleware, and integrating various API handlers.\n- Definitions in the File:\n  - **Structs**:\n    - `Server`: Represents the HTTP server instance.\n      - Fields: `Router` (*chi.Mux), `ImageHandler` (*ImageHandler), `CustomerHandler` (*CustomerHandler), `BuildHandler` (*BuildHandler), `Logger` (zerolog.Logger).\n  - **Functions**:\n    - `NewServer(imageUsecase *usecase.ImageUsecase, customerUsecase *usecase.CustomerUsecase, buildUsecase *usecase.BuildUsecase, logger zerolog.Logger)`: Public function.\n      - Signature: `func NewServer(...) *Server`\n      - Description: Creates and configures a new `Server` instance, initializing the Chi router, injecting use case dependencies into handlers, and setting up routes.\n    - `setupRoutes()`: Internal method on `Server`.\n      - Signature: `func (s *Server) setupRoutes()`\n      - Description: Configures the HTTP routes using `chi.Router`, applies global middleware, defines a health check endpoint, and groups API routes under `/v1`.\n    - `ServeHTTP(w http.ResponseWriter, r *http.Request)`: Public method on `Server`.\n      - Signature: `func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request)`\n      - Description: Implements the `http.Handler` interface, allowing the `Server` to be used directly with `http.ListenAndServe`.\n    - `Shutdown(ctx context.Context)`: Public method on `Server`.\n      - Signature: `func (s *Server) Shutdown(ctx context.Context) error`\n      - Description: Placeholder for graceful server shutdown logic, currently just logs a message.\n- Notable Patterns or Logic:\n  - **Middleware**: Integrates `github.com/go-chi/chi/v5/middleware` for common HTTP functionalities like request ID, real IP, logging, panic recovery, and request timeouts.\n  - **API Versioning**: All core API routes are prefixed with `/v1`.\n  - **Dependency Injection**: Handlers are created and injected with their respective use cases during server initialization.\n  - **Health Check**: Provides a simple `/health` endpoint for readiness probes.\n",
  "backend/internal/adapter/postgres/build_event_repository.go": "- File Path: `backend/internal/adapter/postgres/build_event_repository.go`\n- High-Level Purpose: This file provides a PostgreSQL implementation of the `BuildEventRepository` interface, handling database interactions for build event data.\n- Definitions in the File:\n  - **Structs**:\n    - `pgBuildEventRepository`: PostgreSQL-specific implementation of `BuildEventRepository`.\n      - Fields: `db` (*pgxpool.Pool).\n  - **Functions**:\n    - `NewBuildEventRepository(db *pgxpool.Pool)`: Public function.\n      - Signature: `func NewBuildEventRepository(db *pgxpool.Pool) repository.BuildEventRepository`\n      - Description: Constructor for `pgBuildEventRepository`, taking a `pgxpool.Pool` for database access.\n    - `Create(ctx context.Context, event *domain.BuildEvent)`: Public method on `pgBuildEventRepository`.\n      - Signature: `func (r *pgBuildEventRepository) Create(ctx context.Context, event *domain.BuildEvent) (int, error)`\n      - Description: Inserts a new build event record into the `build_events` table and returns its generated ID, `created_at`, and `updated_at` timestamps.\n    - `FindByID(ctx context.Context, id int)`: Public method on `pgBuildEventRepository`.\n      - Signature: `func (r *pgBuildEventRepository) FindByID(ctx context.Context, id int) (*domain.BuildEvent, error)`\n      - Description: Queries the `build_events` table to retrieve a single build event by its `id`.\n    - `Update(ctx context.Context, event *domain.BuildEvent)`: Public method on `pgBuildEventRepository`.\n      - Signature: `func (r *pgBuildEventRepository) Update(ctx context.Context, event *domain.BuildEvent) error`\n      - Description: Updates the `image_id` and `status` fields of an existing build event record in the `build_events` table.\n",
  "backend/internal/adapter/postgres/customer_repository.go": "- File Path: `backend/internal/adapter/postgres/customer_repository.go`\n- High-Level Purpose: This file provides a PostgreSQL implementation of the `CustomerRepository` interface, handling database interactions for customer data.\n- Definitions in the File:\n  - **Structs**:\n    - `pgCustomerRepository`: PostgreSQL-specific implementation of `CustomerRepository`.\n      - Fields: `db` (*pgxpool.Pool).\n  - **Functions**:\n    - `NewCustomerRepository(db *pgxpool.Pool)`: Public function.\n      - Signature: `func NewCustomerRepository(db *pgxpool.Pool) repository.CustomerRepository`\n      - Description: Constructor for `pgCustomerRepository`, taking a `pgxpool.Pool` for database access.\n    - `FindAll(ctx context.Context)`: Public method on `pgCustomerRepository`.\n      - Signature: `func (r *pgCustomerRepository) FindAll(ctx context.Context) ([]*domain.Customer, error)`\n      - Description: Queries the `customers` table to retrieve all customer records, mapping them to `domain.Customer` structs.\n    - `FindByNamespace(ctx context.Context, namespace string)`: Public method on `pgCustomerRepository`.\n      - Signature: `func (r *pgCustomerRepository) FindByNamespace(ctx context.Context, namespace string) (*domain.Customer, error)`\n      - Description: Queries the `customers` table to retrieve a single customer by their `namespace`. Returns `nil, nil` if no rows are found.\n",
  "backend/internal/adapter/postgres/cve_finding_repository.go": "- File Path: `backend/internal/adapter/postgres/cve_finding_repository.go`\n- High-Level Purpose: This file provides a PostgreSQL implementation of the `CVEFindingRepository` interface, specifically designed for efficient batch insertion of CVE findings.\n- Definitions in the File:\n  - **Structs**:\n    - `pgCVEFindingRepository`: PostgreSQL-specific implementation of `CVEFindingRepository`.\n      - Fields: `db` (*pgxpool.Pool).\n  - **Functions**:\n    - `NewCVEFindingRepository(db *pgxpool.Pool)`: Public function.\n      - Signature: `func NewCVEFindingRepository(db *pgxpool.Pool) repository.CVEFindingRepository`\n      - Description: Constructor for `pgCVEFindingRepository`, taking a `pgxpool.Pool` for database access.\n    - `CreateBatch(ctx context.Context, cves []*domain.CVEFinding)`: Public method on `pgCVEFindingRepository`.\n      - Signature: `func (r *pgCVEFindingRepository) CreateBatch(ctx context.Context, cves []*domain.CVEFinding) error`\n      - Description: Inserts multiple `CVEFinding` records into the `cve_findings` table using a single `pgx.Batch` operation for performance.\n- Notable Patterns or Logic:\n  - **Batch Insertion**: Utilizes `pgx.Batch` to send multiple `INSERT` statements to the database in a single round trip, significantly improving performance for bulk data operations.\n",
  "backend/internal/adapter/postgres/db.go": "- File Path: `backend/internal/adapter/postgres/db.go`\n- High-Level Purpose: This file provides a utility function to establish and test a connection to a PostgreSQL database using `pgxpool`.\n- Definitions in the File:\n  - **Functions**:\n    - `NewConnection(ctx context.Context, connString string)`: Public function.\n      - Signature: `func NewConnection(ctx context.Context, connString string) (*pgxpool.Pool, error)`\n      - Description: Creates a new PostgreSQL connection pool using the provided connection string. It also pings the database to verify the connection before returning the pool.\n",
  "backend/internal/adapter/postgres/image_repository.go": "- File Path: `backend/internal/adapter/postgres/image_repository.go`\n- High-Level Purpose: This file provides a PostgreSQL implementation of the `ImageRepository` interface, handling database interactions for image data.\n- Definitions in the File:\n  - **Structs**:\n    - `pgImageRepository`: PostgreSQL-specific implementation of `ImageRepository`.\n      - Fields: `db` (*pgxpool.Pool).\n  - **Functions**:\n    - `NewImageRepository(db *pgxpool.Pool)`: Public function.\n      - Signature: `func NewImageRepository(db *pgxpool.Pool) repository.ImageRepository`\n      - Description: Constructor for `pgImageRepository`, taking a `pgxpool.Pool` for database access.\n    - `FindAll(ctx context.Context)`: Public method on `pgImageRepository`.\n      - Signature: `func (r *pgImageRepository) FindAll(ctx context.Context) ([]*domain.Image, error)`\n      - Description: Queries the `images` table to retrieve all image records, mapping them to `domain.Image` structs. Handles `TEXT[]` for tags using `pq.StringArray`.\n    - `FindByID(ctx context.Context, id int)`: Public method on `pgImageRepository`.\n      - Signature: `func (r *pgImageRepository) FindByID(ctx context.Context, id int) (*domain.Image, error)`\n      - Description: Queries the `images` table to retrieve a single image by its `id`. Returns `nil, nil` if no rows are found.\n    - `Create(ctx context.Context, image *domain.Image)`: Public method on `pgImageRepository`.\n      - Signature: `func (r *pgImageRepository) Create(ctx context.Context, image *domain.Image) (int, error)`\n      - Description: Inserts a new image record into the `images` table and returns the newly generated ID, `created_at`, and `updated_at` timestamps.\n- Notable Patterns or Logic:\n  - Uses `github.com/lib/pq` for `pq.StringArray` to handle PostgreSQL array types (`TEXT[]`).\n  - Explicitly handles `pgx.ErrNoRows` to return `nil, nil` for \"not found\" scenarios, distinguishing them from actual database errors.\n",
  "backend/internal/adapter/postgres/sbom_record_repository.go": "- File Path: `backend/internal/adapter/postgres/sbom_record_repository.go`\n- High-Level Purpose: This file provides a PostgreSQL implementation of the `SBOMRecordRepository` interface, handling database interactions for SBOM record data.\n- Definitions in the File:\n  - **Structs**:\n    - `pgSBOMRecordRepository`: PostgreSQL-specific implementation of `SBOMRecordRepository`.\n      - Fields: `db` (*pgxpool.Pool).\n  - **Functions**:\n    - `NewSBOMRecordRepository(db *pgxpool.Pool)`: Public function.\n      - Signature: `func NewSBOMRecordRepository(db *pgxpool.Pool) repository.SBOMRecordRepository`\n      - Description: Constructor for `pgSBOMRecordRepository`, taking a `pgxpool.Pool` for database access.\n    - `Create(ctx context.Context, sbom *domain.SBOMRecord)`: Public method on `pgSBOMRecordRepository`.\n      - Signature: `func (r *pgSBOMRecordRepository) Create(ctx context.Context, sbom *domain.SBOMRecord) error`\n      - Description: Inserts a new SBOM record into the `sbom_records` table.\n",
  "backend/internal/adapter/simulator/orchestrator.go": "- File Path: `backend/internal/adapter/simulator/orchestrator.go`\n- High-Level Purpose: This file defines an interface for a build orchestrator and provides a mock implementation to simulate triggering image builds without interacting with a real CI/CD system.\n- Definitions in the File:\n  - **Interfaces**:\n    - `BuildOrchestrator`: Defines the contract for triggering image builds.\n      - Methods:\n        - `TriggerBuild(ctx context.Context, event *domain.BuildEvent) error`: Triggers a build process based on a `BuildEvent`.\n  - **Structs**:\n    - `MockBuildOrchestrator`: A mock implementation of `BuildOrchestrator`.\n  - **Functions**:\n    - `NewMockBuildOrchestrator()`: Public function.\n      - Signature: `func NewMockBuildOrchestrator() BuildOrchestrator`\n      - Description: Constructor for `MockBuildOrchestrator`.\n    - `TriggerBuild(ctx context.Context, event *domain.BuildEvent)`: Public method on `MockBuildOrchestrator`.\n      - Signature: `func (m *MockBuildOrchestrator) TriggerBuild(ctx context.Context, event *domain.BuildEvent) error`\n      - Description: Simulates triggering a build by logging the event details. It explicitly states that a real system would integrate with a CI/CD system.\n- Notable Patterns or Logic:\n  - **Mocking**: Provides a mock implementation for an external dependency (`BuildOrchestrator`), allowing the application to function without a real CI/CD integration during development or for MVP purposes.\n  - **Interface-based Design**: Uses an interface to decouple the business logic from the specific build orchestration implementation.",
  "backend/internal/domain/build_event.go": "- File Path: `backend/internal/domain/build_event.go`\n- High-Level Purpose: This file defines the `BuildEvent` data structure, representing a record of an image build process within the secure image service.\n- Definitions in the File:\n  - **Structs**:\n    - `BuildEvent`: Represents an event related to an image build.\n      - Fields:\n        - `ID` (int): Unique identifier for the build event.\n        - `TenantNamespace` (string): Namespace of the tenant/customer for whom the build was triggered.\n        - `ImageID` (*int): Optional pointer to the ID of the image produced by this build (can be null if not yet completed).\n        - `TriggerType` (string): The mechanism that triggered the build (e.g., \"api\", \"webhook\", \"manual\").\n        - `Status` (string): Current status of the build (e.g., \"pending\", \"completed\", \"failed\").\n        - `CreatedAt` (time.Time): Timestamp when the build event record was created.\n        - `UpdatedAt` (time.Time): Timestamp when the build event record was last updated.\n- Notable Patterns or Logic:\n  - Uses `json:\"...\"` tags for JSON serialization/deserialization.\n  - `ImageID` is a pointer (`*int`) to allow it to be `null` in the database before an image is successfully created.\n",
  "backend/internal/domain/customer.go": "- File Path: `backend/internal/domain/customer.go`\n- High-Level Purpose: This file defines the `Customer` data structure, representing the core domain model for a customer or tenant within the secure image service.\n- Definitions in the File:\n  - **Structs**:\n    - `Customer`: Represents a customer entity.\n      - Fields:\n        - `Namespace` (string): Unique identifier for the customer (e.g., tenant ID).\n        - `Name` (string): Full name of the customer.\n        - `ContactInfo` (string): Contact details for the customer.\n        - `SLATier` (string): Service Level Agreement tier for the customer.\n        - `CreatedAt` (time.Time): Timestamp when the customer record was created.\n        - `UpdatedAt` (time.Time): Timestamp when the customer record was last updated.\n- Notable Patterns or Logic:\n  - Uses `json:\"...\"` tags for JSON serialization/deserialization.\n",
  "backend/internal/domain/cve_finding.go": "- File Path: `backend/internal/domain/cve_finding.go`\n- High-Level Purpose: This file defines the `CVEFinding` data structure, representing a Common Vulnerabilities and Exposures finding associated with an image.\n- Definitions in the File:\n  - **Structs**:\n    - `CVEFinding`: Represents a CVE finding for an image.\n      - Fields:\n        - `ID` (int): Unique identifier for the CVE finding.\n        - `ImageID` (int): Foreign key referencing the associated image.\n        - `CVEID` (string): The identifier of the CVE (e.g., \"CVE-2023-12345\").\n        - `Severity` (string): The severity level of the CVE (e.g., \"Critical\", \"High\", \"Medium\", \"Low\").\n        - `Description` (string): A brief description of the vulnerability.\n        - `FixAvailable` (bool): Indicates whether a fix is available for the CVE.\n        - `CreatedAt` (time.Time): Timestamp when the CVE finding record was created.\n- Notable Patterns or Logic:\n  - Uses `json:\"...\"` tags for JSON serialization/deserialization.\n",
  "backend/internal/domain/image.go": "- File Path: `backend/internal/domain/image.go`\n- High-Level Purpose: This file defines the `Image` data structure, representing the core domain model for an image within the secure image service.\n- Definitions in the File:\n  - **Structs**:\n    - `Image`: Represents an image entity.\n      - Fields:\n        - `ID` (int): Unique identifier for the image.\n        - `TenantNamespace` (string): Namespace of the tenant/customer owning the image.\n        - `Digest` (string): Cryptographic digest of the image content.\n        - `Tags` ([]string): List of tags associated with the image.\n        - `SLSALevel` (int): SLSA (Supply-chain Levels for Software Artifacts) level of the image.\n        - `CreatedAt` (time.Time): Timestamp when the image record was created.\n        - `UpdatedAt` (time.Time): Timestamp when the image record was last updated.\n- Notable Patterns or Logic:\n  - Uses `json:\"...\"` tags for JSON serialization/deserialization.\n",
  "backend/internal/domain/sbom_record.go": "- File Path: `backend/internal/domain/sbom_record.go`\n- High-Level Purpose: This file defines the `SBOMRecord` data structure, representing a Software Bill of Materials record associated with an image.\n- Definitions in the File:\n  - **Structs**:\n    - `SBOMRecord`: Represents an SBOM record for an image.\n      - Fields:\n        - `ID` (int): Unique identifier for the SBOM record.\n        - `ImageID` (int): Foreign key referencing the associated image.\n        - `Format` (string): The format of the SBOM (e.g., \"SPDX\", \"CycloneDX\").\n        - `URI` (string): The URI where the SBOM content can be accessed (e.g., MinIO path).\n        - `CreatedAt` (time.Time): Timestamp when the SBOM record was created.\n- Notable Patterns or Logic:\n  - Uses `json:\"...\"` tags for JSON serialization/deserialization.\n",
  "backend/internal/repository/build_event.go": "- File Path: `backend/internal/repository/build_event.go`\n- High-Level Purpose: This file defines the interface for interacting with build event data storage, abstracting the underlying database implementation.\n- Definitions in the File:\n  - **Interfaces**:\n    - `BuildEventRepository`: Defines methods for accessing and managing build events.\n      - Methods:\n        - `Create(ctx context.Context, event *domain.BuildEvent) (int, error)`: Creates a new build event and returns its ID.\n        - `FindByID(ctx context.Context, id int) (*domain.BuildEvent, error)`: Retrieves a single build event by its ID.\n        - `Update(ctx context.Context, event *domain.BuildEvent) error`: Updates an existing build event.\n",
  "backend/internal/repository/customer.go": "- File Path: `backend/internal/repository/customer.go`\n- High-Level Purpose: This file defines the interface for interacting with customer data storage, abstracting the underlying database implementation.\n- Definitions in the File:\n  - **Interfaces**:\n    - `CustomerRepository`: Defines methods for accessing customer data.\n      - Methods:\n        - `FindAll(ctx context.Context) ([]*domain.Customer, error)`: Retrieves all customers.\n        - `FindByNamespace(ctx context.Context, namespace string) (*domain.Customer, error)`: Retrieves a single customer by their namespace.\n",
  "backend/internal/repository/cve_finding.go": "- File Path: `backend/internal/repository/cve_finding.go`\n- High-Level Purpose: This file defines the interface for interacting with CVE (Common Vulnerabilities and Exposures) finding data storage, abstracting the underlying database implementation.\n- Definitions in the File:\n  - **Interfaces**:\n    - `CVEFindingRepository`: Defines methods for accessing and managing CVE findings.\n      - Methods:\n        - `CreateBatch(ctx context.Context, cves []*domain.CVEFinding) error`: Creates multiple CVE finding records in a batch.\n",
  "backend/internal/repository/image.go": "- File Path: `backend/internal/repository/image.go`\n- High-Level Purpose: This file defines the interface for interacting with image data storage, abstracting the underlying database implementation.\n- Definitions in the File:\n  - **Interfaces**:\n    - `ImageRepository`: Defines methods for accessing and managing image data.\n      - Methods:\n        - `FindAll(ctx context.Context) ([]*domain.Image, error)`: Retrieves all images.\n        - `FindByID(ctx context.Context, id int) (*domain.Image, error)`: Retrieves a single image by its ID.\n        - `Create(ctx context.Context, image *domain.Image) (int, error)`: Creates a new image record and returns its ID.\n",
  "backend/internal/repository/sbom_record.go": "- File Path: `backend/internal/repository/sbom_record.go`\n- High-Level Purpose: This file defines the interface for interacting with SBOM (Software Bill of Materials) record data storage, abstracting the underlying database implementation.\n- Definitions in the File:\n  - **Interfaces**:\n    - `SBOMRecordRepository`: Defines methods for accessing and managing SBOM records.\n      - Methods:\n        - `Create(ctx context.Context, sbom *domain.SBOMRecord) error`: Creates a new SBOM record.\n",
  "backend/internal/usecase/build_usecase.go": "- File Path: `backend/internal/usecase/build_usecase.go`\n- High-Level Purpose: This file implements the business logic for completing an image build process, which involves creating a new image record, associating SBOMs and CVE findings, and updating the build event status.\n- Definitions in the File:\n  - **Structs**:\n    - `BuildCompletionRequest`: Represents the payload for completing a build.\n      - Fields: `ImageDigest` (string), `Tags` ([]string), `SLSALevel` (int), `SBOMs` ([]SBOMInput), `CVEs` ([]CVEFindingInput).\n    - `SBOMInput`: Represents an SBOM record provided during build completion.\n      - Fields: `Format` (string), `URI` (string).\n    - `CVEFindingInput`: Represents a CVE finding provided during build completion.\n      - Fields: `CVEID` (string), `Severity` (string), `Description` (string), `FixAvailable` (bool).\n    - `BuildUsecase`: Encapsulates build completion business logic.\n      - Fields: `buildRepo` (repository.BuildEventRepository), `imageRepo` (repository.ImageRepository), `sbomRepo` (repository.SBOMRecordRepository), `cveRepo` (repository.CVEFindingRepository).\n  - **Functions**:\n    - `NewBuildUsecase(...)`: Public function.\n      - Signature: `func NewBuildUsecase(...) *BuildUsecase`\n      - Description: Constructor for `BuildUsecase`, injecting dependencies for build event, image, SBOM, and CVE finding repositories.\n    - `CompleteBuild(ctx context.Context, buildID int, req BuildCompletionRequest)`: Public method on `BuildUsecase`.\n      - Signature: `func (uc *BuildUsecase) CompleteBuild(ctx context.Context, buildID int, req BuildCompletionRequest) (*domain.Image, error)`\n      - Description: Orchestrates the build completion process:\n        1. Finds and validates the build event's status.\n        2. Creates a new `domain.Image` record.\n        3. Creates associated `SBOMRecord` entries.\n        4. Creates associated `CVEFinding` entries (using batch insertion).\n        5. Updates the original `BuildEvent` to \"completed\" and links it to the new image.\n      - Returns the newly created `domain.Image` or an error if any step fails.\n- Notable Patterns or Logic:\n  - **Transactional Logic**: The `CompleteBuild` method performs a sequence of dependent database operations. The comment `// In a real system, we'd want transactional behavior here` indicates that this sequence ideally should be wrapped in a database transaction to ensure atomicity.\n  - **Orchestration**: This use case acts as an orchestrator, coordinating operations across multiple repositories to fulfill a complex business process.\n  - **Input Structs**: Defines specific input structs (`SBOMInput`, `CVEFindingInput`) for the completion request payload.\n",
  "backend/internal/usecase/customer_usecase.go": "- File Path: `backend/internal/usecase/customer_usecase.go`\n- High-Level Purpose: This file implements the business logic for customer-related operations, acting as an intermediary between handlers and the customer repository.\n- Definitions in the File:\n  - **Structs**:\n    - `CustomerUsecase`: Encapsulates customer-related business logic.\n      - Fields: `repo` (repository.CustomerRepository).\n  - **Functions**:\n    - `NewCustomerUsecase(repo repository.CustomerRepository)`: Public function.\n      - Signature: `func NewCustomerUsecase(repo repository.CustomerRepository) *CustomerUsecase`\n      - Description: Constructor for `CustomerUsecase`, injecting a `CustomerRepository` dependency.\n    - `ListCustomers(ctx context.Context)`: Public method on `CustomerUsecase`.\n      - Signature: `func (uc *CustomerUsecase) ListCustomers(ctx context.Context) ([]*domain.Customer, error)`\n      - Description: Retrieves a list of all customers by delegating to the underlying repository.\n    - `GetCustomer(ctx context.Context, namespace string)`: Public method on `CustomerUsecase`.\n      - Signature: `func (uc *CustomerUsecase) GetCustomer(ctx context.Context, namespace string) (*domain.Customer, error)`\n      - Description: Retrieves a single customer by namespace by delegating to the underlying repository.\n",
  "backend/internal/usecase/image_usecase.go": "- File Path: `backend/internal/usecase/image_usecase.go`\n- High-Level Purpose: This file implements the business logic for image-related operations, including listing images, retrieving a single image, and initiating new image builds through an orchestrator.\n- Definitions in the File:\n  - **Structs**:\n    - `ImageUsecase`: Encapsulates image-related business logic.\n      - Fields: `repo` (repository.ImageRepository), `buildRepo` (repository.BuildEventRepository), `orchestrator` (simulator.BuildOrchestrator).\n  - **Functions**:\n    - `NewImageUsecase(repo repository.ImageRepository, buildRepo repository.BuildEventRepository, orchestrator simulator.BuildOrchestrator)`: Public function.\n      - Signature: `func NewImageUsecase(repo repository.ImageRepository, buildRepo repository.BuildEventRepository, orchestrator simulator.BuildOrchestrator) *ImageUsecase`\n      - Description: Constructor for `ImageUsecase`, injecting dependencies for image repository, build event repository, and build orchestrator.\n    - `ListImages(ctx context.Context)`: Public method on `ImageUsecase`.\n      - Signature: `func (uc *ImageUsecase) ListImages(ctx context.Context) ([]*domain.Image, error)`\n      - Description: Retrieves a list of all images by delegating to the underlying image repository.\n    - `GetImage(ctx context.Context, id int)`: Public method on `ImageUsecase`.\n      - Signature: `func (uc *ImageUsecase) GetImage(ctx context.Context, id int) (*domain.Image, error)`\n      - Description: Retrieves a single image by its ID by delegating to the underlying image repository.\n    - `CreateBuild(ctx context.Context, tenantNamespace, triggerType string)`: Public method on `ImageUsecase`.\n      - Signature: `func (uc *ImageUsecase) CreateBuild(ctx context.Context, tenantNamespace, triggerType string) (*domain.BuildEvent, error)`\n      - Description: Creates a new build event record in the database with a \"pending\" status and then triggers a simulated build process via the `BuildOrchestrator`.\n",
  "backend/pkg/config/config.go": "- File Path: `backend/pkg/config/config.go`\n- High-Level Purpose: This file defines the application's configuration structure and provides a function to load configuration values from environment variables, applying default values where necessary.\n- Definitions in the File:\n  - **Structs**:\n    - `Config`: Represents the application's configuration.\n      - Fields: `DatabaseURL` (string), `APIPort` (string).\n  - **Functions**:\n    - `Load()`: Public function.\n      - Signature: `func Load() (*Config, error)`\n      - Description: Loads configuration settings from environment variables (`API_PORT`, `DATABASE_URL`). It defaults `API_PORT` to \"8080\" if not set or invalid, and returns a pointer to a `Config` struct.\n",
  "backend/pkg/logger/logger.go": "- File Path: `backend/pkg/logger/logger.go`\n- High-Level Purpose: This file provides a utility function to initialize and configure a `zerolog` logger for consistent logging across the application.\n- Definitions in the File:\n  - **Functions**:\n    - `New()`: Public function.\n      - Signature: `func New() zerolog.Logger`\n      - Description: Returns a new `zerolog.Logger` instance configured for console output (stderr), `TraceLevel`, with timestamps.\n",
  "deployments/docker-compose.yml": "- File Path: `deployments/docker-compose.yml`\n- High-Level Purpose: This Docker Compose file defines and configures a multi-service application stack, including a PostgreSQL database, MinIO object storage, the Go backend, and an Nginx frontend.\n- Definitions in the File:\n  - **Services**:\n    - `db`: PostgreSQL database.\n      - Image: `postgres:14-alpine`.\n      - Environment variables for database name, user, and password.\n      - Port mapping: `5432:5432`.\n      - Volumes: `postgres_data` for persistence, `./seed/init.sql` for initialization.\n      - Healthcheck: Ensures the database is ready before dependent services start.\n    - `minio`: MinIO object storage.\n      - Image: `minio/minio:latest`.\n      - Port mapping: `9000:9000` (API), `9001:9001` (console).\n      - Environment variables for root user and password.\n      - Command: `server /data --console-address \":9001\"`.\n      - Volumes: `minio_data` for persistence.\n    - `backend`: Go backend application.\n      - Builds from `../backend/Dockerfile`.\n      - Port mapping: `${API_PORT}:${API_PORT}`.\n      - Depends on `db` being healthy.\n      - Environment variables for `DATABASE_URL` and `API_PORT`.\n      - Loads environment variables from `../.env`.\n    - `frontend`: Nginx web server for the frontend.\n      - Image: `nginx:alpine`.\n      - Port mapping: `80:80`.\n      - Volumes: Mounts `../frontend` directory to serve static files.\n      - Depends on `backend`.\n  - **Volumes**:\n    - `postgres_data`: For PostgreSQL data persistence.\n    - `minio_data`: For MinIO data persistence.\n- Notable Patterns or Logic:\n  - **Multi-service orchestration**: Defines how different parts of the application interact.\n  - **Environment variable usage**: Uses `${VAR_NAME}` syntax to inject values from the host or `.env` file.\n  - **Service healthchecks**: Ensures dependencies are ready before starting services.\n  - **Volume mapping**: Persists data for stateful services.\n",
  "deployments/seed/init.sql": "- File Path: `deployments/seed/init.sql`\n- High-Level Purpose: This SQL script initializes the PostgreSQL database schema for the secure image service, creating tables for customers, images, build events, SBOMs, CVE findings, and attestations, and then populates them with sample data.\n- Definitions in the File:\n  - **Tables**:\n    - `customers`: Stores tenant/customer information.\n      - Columns: `namespace` (PK), `name`, `contact_info`, `sla_tier`, `created_at`, `updated_at`.\n    - `images`: Stores image metadata.\n      - Columns: `id` (PK), `tenant_namespace` (FK to customers), `digest` (UNIQUE), `tags` (TEXT[]), `slsa_level`, `created_at`, `updated_at`.\n    - `build_events`: Stores records of image build processes.\n      - Columns: `id` (PK), `tenant_namespace` (FK to customers), `image_id` (FK to images, nullable), `trigger_type`, `status`, `created_at`, `updated_at`.\n    - `sbom_records`: Stores Software Bill of Materials records.\n      - Columns: `id` (PK), `image_id` (FK to images), `format`, `uri`, `created_at`.\n    - `cve_findings`: Stores Common Vulnerabilities and Exposures findings.\n      - Columns: `id` (PK), `image_id` (FK to images), `cve_id`, `severity`, `description`, `fix_available`, `created_at`.\n    - `attestations`: Stores image attestation records.\n      - Columns: `id` (PK), `image_id` (FK to images), `type`, `uri`, `created_at`.\n  - **Indexes**:\n    - `idx_images_tenant_namespace`\n    - `idx_build_events_tenant_namespace`\n    - `idx_build_events_status`\n    - `idx_sbom_records_image_id`\n    - `idx_cve_findings_image_id`\n    - `idx_attestations_image_id`\n  - **Seed Data**:\n    - Inserts two sample `customers` (`acme-corp`, `startup-x`).\n    - Inserts two sample `images` associated with these customers.\n    - Inserts sample `sbom_records`, `cve_findings`, and `attestations` linked to the seeded images.\n    - Inserts two sample `build_events`.\n- Notable Patterns or Logic:\n  - **Foreign Key Constraints**: Uses `REFERENCES ... ON DELETE CASCADE` or `ON DELETE SET NULL` to manage relationships between tables.\n  - **Array Type**: Uses `TEXT[]` for the `tags` column in the `images` table.\n  - **Default Values**: Many columns have `DEFAULT NOW()` for timestamps and other default values.\n  - **Data Truncation**: `TRUNCATE ... RESTART IDENTITY CASCADE` is used to clear all data and reset primary key sequences before seeding, useful for development environments.\n",
  "frontend/css/style.css": "- File Path: `frontend/css/style.css`\n- High-Level Purpose: This file defines the visual styling for the frontend application, covering global typography, layout, and specific component appearances.\n- Definitions in the File:\n  - **CSS Rules**:\n    - `body`: Sets global font family, line height, background color, and text color.\n    - `header`: Styles the application header with a dark background, light text, and padding.\n    - `header h1`, `header h1 a`: Styles the main title and its link within the header.\n    - `main`: Defines the maximum width and horizontal centering for the main content area.\n    - `.card`: Styles generic content blocks with a white background, padding, rounded corners, and a subtle shadow.\n    - `.card h2`: Styles headings within cards, including a bottom border.\n    - `.image-table`, `th`, `td`: Styles the image list table, including borders, padding, and text alignment.\n    - `.image-table th`: Styles table headers with a light gray background and bold text.\n    - `.image-table tbody tr:hover`: Adds a hover effect to table rows.\n    - `.btn`: Styles general action buttons/links with a blue background, white text, and rounded corners.\n    - `.back-link`: Styles navigation links (e.g., \"Back to Image List\") with blue text and an underline on hover.\n    - `.grid`: Implements a CSS Grid layout for responsive arrangement of elements, using `auto-fit` and `minmax` for flexible columns.\n    - `.detail-list`, `li`, `strong`: Styles for detailed lists, including padding and bottom borders for list items.\n    - `.tag`: Styles small informational tags (e.g., image tags) with a light gray background and rounded corners.\n    - `.severity-Critical`, `.severity-High`, `.severity-Medium`, `.severity-Low`: Defines specific text colors and font weights for different CVE severity levels.\n- Notable Patterns or Logic:\n  - **Responsive Design**: Utilizes CSS Grid with `auto-fit` and `minmax` to create a responsive layout for content cards.\n  - **Semantic Class Naming**: Uses descriptive class names (e.g., `card`, `image-table`, `btn`, `tag`, `severity-Critical`) to indicate purpose and styling.\n  - **Theming**: Establishes a consistent visual theme with a defined color palette and typography.\n",
  "frontend/index.html": "- File Path: `frontend/index.html`\n- High-Level Purpose: This is the main HTML file for the frontend application, establishing the basic page structure, linking stylesheets, and including the primary JavaScript module.\n- Definitions in the File:\n  - **HTML Structure**:\n    - `\u003c!DOCTYPE html\u003e`, `\u003chtml\u003e`, `\u003chead\u003e`, `\u003cbody\u003e`: Standard document structure.\n    - `\u003cmeta charset=\"UTF-8\"\u003e`, `\u003cmeta name=\"viewport\" ...\u003e`: Character set and responsive viewport settings.\n    - `\u003ctitle\u003e`: \"Secure Software Supply Chain MVP\".\n    - `\u003clink rel=\"stylesheet\" href=\"css/style.css\"\u003e`: Links the main CSS stylesheet.\n    - `\u003cheader\u003e`: Contains the main title and a link to the home page.\n    - `\u003cmain id=\"app\"\u003e`: The main content area where dynamic content will be rendered, initially showing \"Loading...\".\n    - `\u003cscript type=\"module\" src=\"js/main.js\"\u003e\u003c/script\u003e`: Imports the main JavaScript module.\n",
  "frontend/js/api.js": "- File Path: `frontend/js/api.js`\n- High-Level Purpose: This file provides a JavaScript API client for the frontend to interact with the backend services, abstracting HTTP requests and handling common response patterns.\n- Definitions in the File:\n  - **Constants**:\n    - `BASE_URL` (string): The base path for all API requests, set to `/v1`.\n  - **Functions**:\n    - `fetchJSON(url, options)`: Internal async function.\n      - Signature: `async function fetchJSON(url, options = {})`\n      - Description: A generic utility to perform `fetch` requests, parse JSON responses, and handle HTTP errors by throwing an `Error` with details.\n  - **Variables**:\n    - `apiClient`: Publicly exported object.\n      - Description: An object containing methods for specific API endpoints.\n      - Methods:\n        - `getImages()`: Fetches a list of all images.\n        - `getImage(id)`: Fetches a single image by its ID.\n        - `getImageSBOMs(id)`: Fetches SBOM (Software Bill of Materials) data for a specific image.\n        - `getImageCVEs(id)`: Fetches CVE (Common Vulnerabilities and Exposures) data for a specific image.\n        - `getImageVerification(id)`: Fetches verification and attestation data for a specific image.\n- Notable Patterns or Logic:\n  - Centralized API client for consistent interaction with the backend.\n  - Robust error handling for network requests and API responses.\n",
  "frontend/js/components/imageDetail.js": "- File Path: `frontend/js/components/imageDetail.js`\n- High-Level Purpose: This file contains functions responsible for rendering the detailed view of a single image, including its metadata, CVE findings, SBOMs, and verification information.\n- Definitions in the File:\n  - **Functions**:\n    - `renderCVEs(cves)`: Internal function.\n      - Signature: `function renderCVEs(cves)`\n      - Description: Generates HTML for a list of CVE findings, displaying CVE ID, severity, and fix availability. Returns a message if no CVEs are found.\n    - `renderSBOMs(sboms)`: Internal function.\n      - Signature: `function renderSBOMs(sboms)`\n      - Description: Generates HTML for a list of SBOM records, showing format and a link to the URI. Returns a message if no SBOMs are found.\n    - `renderVerification(verification)`: Internal function.\n      - Signature: `function renderVerification(verification)`\n      - Description: Generates HTML for image verification details, including signature key ID, Rekor entry link, and a list of attestations with their types and URIs.\n    - `renderImageDetail({ image, sboms, cves, verification })`: Publicly exported function.\n      - Signature: `export function renderImageDetail({ image, sboms, cves, verification })`\n      - Description: The main function that composes and returns the full HTML string for an image's detailed view, combining image metadata with the output of `renderCVEs`, `renderSBOMs`, and `renderVerification`. Includes a \"Back to Image List\" link.\n- Notable Patterns or Logic:\n  - Component-based rendering using JavaScript template literals for HTML generation.\n  - Separates rendering logic for different sections (CVEs, SBOMs, verification) into helper functions for modularity.\n",
  "frontend/js/components/imageTable.js": "- File Path: `frontend/js/components/imageTable.js`\n- High-Level Purpose: This file provides a JavaScript function to render an HTML table displaying a list of images, offering a summary view and links to their detailed pages.\n- Definitions in the File:\n  - **Functions**:\n    - `renderImageTable(images)`: Publicly exported function.\n      - Signature: `export function renderImageTable(images)`\n      - Description: Generates the HTML string for a table that lists images. Each row includes the image ID, tenant, a truncated digest, tags, SLSA level, and a \"View Details\" button that links to the image's specific detail page. If no images are provided, it returns a message indicating that no images were found.\n- Notable Patterns or Logic:\n  - **Component-based rendering**: The function encapsulates the logic for rendering the image list table as a self-contained HTML string.\n  - **Conditional Rendering**: Checks if the `images` array is empty and displays a \"No images found\" message if it is.\n  - **Data Mapping**: Iterates over the `images` array to dynamically generate table rows using JavaScript template literals.\n  - **Client-side Navigation**: Uses hash-based links (`#/images/${image.id}`) for navigation to individual image detail pages.",
  "frontend/js/main.js": "- File Path: `frontend/js/main.js`\n- High-Level Purpose: This is the main JavaScript entry point for the frontend application, responsible for client-side routing, fetching data from the backend API, and rendering the appropriate UI components.\n- Definitions in the File:\n  - **Constants**:\n    - `app` (HTMLElement): A reference to the `\u003cmain id=\"app\"\u003e` element in `index.html`, where dynamic content is rendered.\n  - **Functions**:\n    - `showLoading()`: Internal function.\n      - Signature: `const showLoading = () =\u003e {}`\n      - Description: Displays a \"Loading...\" message within the `app` container.\n    - `showError(message)`: Internal function.\n      - Signature: `const showError = (message) =\u003e {}`\n      - Description: Displays an error message in red within the `app` container.\n    - `showImageListView()`: Internal async function.\n      - Signature: `const showImageListView = async () =\u003e {}`\n      - Description: Fetches all images using `apiClient.getImages()` and renders them into the `app` container using `renderImageTable`. Handles loading and error states.\n    - `showImageDetailView(id)`: Internal async function.\n      - Signature: `const showImageDetailView = async (id) =\u003e {}`\n      - Description: Fetches a specific image, its SBOMs, CVEs, and verification data concurrently using `Promise.all` and the `apiClient`. It then renders the detailed view into the `app` container using `renderImageDetail`. Handles loading and error states.\n    - `router()`: Internal function.\n      - Signature: `const router = () =\u003e {}`\n      - Description: Determines the current view based on the URL hash (`window.location.hash`). If the hash matches `#/images/:id`, it calls `showImageDetailView`; otherwise, it calls `showImageListView`.\n- Notable Patterns or Logic:\n  - **Client-side Routing**: Implements a simple hash-based router to navigate between the image list and image detail views without full page reloads.\n  - **Asynchronous Data Fetching**: Uses `async/await` and `Promise.all` for efficient, non-blocking API calls.\n  - **Component Integration**: Imports and utilizes `apiClient`, `renderImageTable`, and `renderImageDetail` to build the user interface.\n  - **Event Listeners**: Attaches the `router` function to `hashchange` and `DOMContentLoaded` events to manage navigation and initial page load.\n"
}