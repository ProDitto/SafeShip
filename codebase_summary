{
  ".env.example": "- File Path: `.env.example`\n- High-Level Purpose: This file provides an example template for environment variables used to configure the application, including API server, PostgreSQL database, and MinIO object storage settings.\n- Definitions in the File:\n  - **Variables/Constants**:\n    - `API_PORT`: (string) Default port for the API server (e.g., `8080`).\n    - `POSTGRES_USER`: (string) PostgreSQL database username (e.g., `user`).\n    - `POSTGRES_PASSWORD`: (string) PostgreSQL database password (e.g., `password`).\n    - `POSTGRES_DB`: (string) PostgreSQL database name (e.g., `secure_supply_chain`).\n    - `DATABASE_URL`: (string) Full PostgreSQL connection string (e.g., `postgres://user:password@db:5432/secure_supply_chain?sslmode=disable`).\n    - `MINIO_ENDPOINT`: (string) MinIO server endpoint (e.g., `minio:9000`).\n    - `MINIO_ACCESS_KEY`: (string) MinIO access key (e.g., `minioadmin`).\n    - `MINIO_SECRET_KEY`: (string) MinIO secret key (e.g., `minioadmin`).\n    - `MINIO_USE_SSL`: (boolean) Whether to use SSL for MinIO (e.g., `false`).\n- Notable Patterns or Logic:\n  - Provides clear variable names and example values for local development setup.\n  - Includes placeholders for MinIO, indicating future integration or functionality.\n",
  ".gitignore": "- File Path: `.gitignore`\n- High-Level Purpose: This file specifies intentionally untracked files and directories that Git should ignore, preventing them from being committed to the repository.\n- Definitions in the File:\n  - **Ignored Patterns**:\n    - Binary files: `*.exe`, `*.dll`, `*.so`, `*.dylib`, `*.test`, `*.out`.\n    - Go-specific files: `vendor/` (commented out), `go.work`, `go.work.sum`.\n    - Environment files: `.env`.\n    - Docker-related files: `docker-compose.override.yml`, `docker-compose.local.yml`.\n    - Build output directories: `/build`, `/dist`.\n    - IDE-specific files: `.idea/`, `.vscode/`, `*.swp`, `*~`.\n",
  "Makefile": "- File Path: `Makefile`\n- High-Level Purpose: This Makefile provides a set of convenient commands for managing the Docker Compose-based development environment, including starting, stopping, viewing logs, and resetting the database.\n- Definitions in the File:\n  - **Targets**:\n    - `up`: Builds and starts all services defined in `docker-compose.yml` in detached mode.\n    - `down`: Stops and removes all services, networks, and volumes defined in `docker-compose.yml`.\n    - `logs`: Displays real-time logs for the `backend` service.\n    - `db-reset`: Stops all services, removes volumes (including database data), restarts only the database, waits for it to be ready, then restarts the backend, frontend, and MinIO services.\n- Notable Patterns or Logic:\n  - Uses `docker-compose` commands for service management.\n  - `db-reset` target includes a `sleep` command to allow the database to fully initialize before dependent services start.\n  - `.PHONY` declaration ensures targets are always run as commands, not as file names.\n",
  "backend/Dockerfile": "- File Path: `backend/Dockerfile`\n- High-Level Purpose: This Dockerfile defines the steps to build a Docker image for the Go backend application using a multi-stage build process for efficiency.\n- Definitions in the File:\n  - **Stages**:\n    - `builder`: Uses `golang:1.21-alpine` to download Go modules and build the `secure-image-service` binary.\n    - `final`: Uses `alpine:latest` as a base, copies the compiled binary from the `builder` stage, exposes port 8080, and sets the command to run the application.\n- Notable Patterns or Logic:\n  - **Multi-stage build**: Separates build environment from runtime environment to produce a smaller final image.\n  - **Dependency caching**: Copies `go.mod` and `go.sum` first to leverage Docker layer caching for dependencies.\n  - **Static compilation**: `CGO_ENABLED=0 GOOS=linux go build` ensures a statically linked binary suitable for Alpine.\n",
  "backend/cmd/server/main.go": "- File Path: `backend/cmd/server/main.go`\n- High-Level Purpose: This is the main entry point for the backend Go application. It initializes the application's configuration, logging, database connection, repositories, use cases, and HTTP server, then starts the server and manages its graceful shutdown.\n- Definitions in the File:\n  - **Functions**:\n    - `main()`: Public function.\n      - Signature: `func main()`\n      - Description:\n        1. Loads environment variables from `.env` (for local development).\n        2. Initializes a `zerolog` logger.\n        3. Loads application configuration (`API_PORT`, `DATABASE_URL`).\n        4. Sets up a context for graceful shutdown using `os.Interrupt` and `syscall.SIGTERM`.\n        5. Establishes a PostgreSQL database connection pool.\n        6. Initializes all concrete repository implementations (PostgreSQL adapters).\n        7. Initializes mock build orchestrator.\n        8. Initializes all use case implementations, injecting their required dependencies.\n        9. Creates and configures the HTTP server using `http_adapter.NewServer`.\n        10. Starts the HTTP server in a goroutine.\n        11. Waits for a shutdown signal.\n        12. Initiates a graceful shutdown of the HTTP server and custom server components.\n- Variables / Constants:\n  - `log` (zerolog.Logger): Application logger.\n  - `cfg` (*config.Config): Application configuration.\n  - `dbPool` (*pgxpool.Pool): PostgreSQL database connection pool.\n  - `imageRepo`, `customerRepo`, `buildEventRepo`, `sbomRepo`, `cveRepo`, `auditRepo` (repository interfaces): Initialized repository instances.\n  - `orchestrator` (simulator.BuildOrchestrator): Mock build orchestrator instance.\n  - `auditUsecase`, `imageUsecase`, `customerUsecase`, `buildUsecase` (*usecase.XUsecase): Initialized use case instances.\n  - `server` (*http_adapter.Server): The main HTTP server instance.\n  - `httpServer` (*http.Server): Standard Go HTTP server.\n- Notable Patterns or Logic:\n  - **Application Bootstrap**: Centralized initialization of all core components.\n  - **Dependency Injection**: All components (repositories, use cases, handlers) are created and wired together manually in `main`.\n  - **Graceful Shutdown**: Implements a mechanism to gracefully shut down the HTTP server upon receiving interrupt signals, allowing ongoing requests to complete within a timeout.\n  - **Configuration Management**: Uses `godotenv` for local `.env` loading and a custom `config` package.\n  - **Structured Logging**: Uses `zerolog` for consistent logging.\n",
  "backend/go.mod": "- File Path: `backend/go.mod`\n- High-Level Purpose: This Go module file defines the module path and manages the direct and indirect dependencies required by the `secure-image-service` backend application.\n- Definitions in the File:\n  - **Module**: `secure-image-service`\n  - **Go Version**: `go 1.21`\n  - **Direct Dependencies**:\n    - `github.com/go-chi/chi/v5 v5.0.12`: HTTP router.\n    - `github.com/jackc/pgx/v5 v5.5.5`: PostgreSQL driver.\n    - `github.com/joho/godotenv v1.5.1`: Loads environment variables from `.env` files.\n    - `github.com/rs/zerolog v1.32.0`: Structured logger.\n  - **Indirect Dependencies**:\n    - Various `jackc` packages for PostgreSQL.\n    - `mattn` packages for console color/tty detection.\n    - `golang.org/x` packages for crypto, sync, sys, text.\n",
  "backend/internal/adapter/handler/http/build_handler.go": "- File Path: `backend/internal/adapter/handler/http/build_handler.go`\n- High-Level Purpose: This file defines HTTP handlers for build-related API endpoints, specifically for completing a previously initiated image build process.\n- Definitions in the File:\n  - **Structs**:\n    - `BuildHandler`: Handles HTTP requests related to image builds.\n      - Fields: `usecase` (*usecase.BuildUsecase).\n  - **Functions**:\n    - `NewBuildHandler(uc *usecase.BuildUsecase)`: Public function.\n      - Signature: `func NewBuildHandler(uc *usecase.BuildUsecase) *BuildHandler`\n      - Description: Constructor for `BuildHandler`, injecting a `BuildUsecase` dependency.\n    - `CompleteBuild(w http.ResponseWriter, r *http.Request)`: Public method on `BuildHandler`.\n      - Signature: `func (h *BuildHandler) CompleteBuild(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles POST requests to `/builds/{buildID}/complete`. It parses the build ID from the URL, decodes the build completion request payload, calls the `BuildUsecase` to finalize the build, and responds with the created image or an error.\n",
  "backend/internal/adapter/handler/http/customer_handler.go": "- File Path: `backend/internal/adapter/handler/http/customer_handler.go`\n- High-Level Purpose: This file defines HTTP handlers for customer-related API endpoints, translating HTTP requests into use case calls and formatting responses.\n- Definitions in the File:\n  - **Structs**:\n    - `CustomerHandler`: Handles HTTP requests related to customers.\n      - Fields: `usecase` (*usecase.CustomerUsecase).\n  - **Functions**:\n    - `NewCustomerHandler(uc *usecase.CustomerUsecase)`: Public function.\n      - Signature: `func NewCustomerHandler(uc *usecase.CustomerUsecase) *CustomerHandler`\n      - Description: Constructor for `CustomerHandler`, injecting a `CustomerUsecase` dependency.\n    - `ListCustomers(w http.ResponseWriter, r *http.Request)`: Public method on `CustomerHandler`.\n      - Signature: `func (h *CustomerHandler) ListCustomers(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles GET requests to list all customers, calls the `CustomerUsecase`, and responds with JSON or an error.\n    - `GetCustomer(w http.ResponseWriter, r *http.Request)`: Public method on `CustomerHandler`.\n      - Signature: `func (h *CustomerHandler) GetCustomer(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles GET requests for a specific customer by namespace (parsed from URL parameter), calls the `CustomerUsecase`, and responds with JSON, a 404 if not found, or an error.\n",
  "backend/internal/adapter/handler/http/image_handler.go": "- File Path: `backend/internal/adapter/handler/http/image_handler.go`\n- High-Level Purpose: This file defines HTTP handlers for image-related API endpoints, managing requests for listing, retrieving, and triggering builds for images. It also provides mocked data for SBOMs, CVEs, and verification.\n- Definitions in the File:\n  - **Structs**:\n    - `ImageHandler`: Handles HTTP requests related to images.\n      - Fields: `usecase` (*usecase.ImageUsecase).\n    - `CreateBuildRequest`: Represents the request payload for triggering a new image build.\n      - Fields: `TenantNamespace` (string).\n  - **Functions**:\n    - `NewImageHandler(uc *usecase.ImageUsecase)`: Public function.\n      - Signature: `func NewImageHandler(uc *usecase.ImageUsecase) *ImageHandler`\n      - Description: Constructor for `ImageHandler`, injecting an `ImageUsecase` dependency.\n    - `CreateBuild(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) CreateBuild(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles POST requests to trigger a new image build, validates the request, calls the `ImageUsecase`, and responds with JSON.\n    - `ListImages(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) ListImages(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles GET requests to list all images, calls the `ImageUsecase`, and responds with JSON or an error.\n    - `GetImage(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) GetImage(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles GET requests for a specific image by ID (parsed from URL parameter), calls the `ImageUsecase`, and responds with JSON, a 404 if not found, or an error.\n    - `GetImageSBOMs(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) GetImageSBOMs(w http.ResponseWriter, r *http.Request)`\n      - Description: Returns mocked SBOM data for a given image ID.\n    - `GetImageCVEs(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) GetImageCVEs(w http.ResponseWriter, r *http.Request)`\n      - Description: Returns mocked CVE data for a given image ID, with different mock data based on the ID.\n    - `GetImageVerification(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) GetImageVerification(w http.ResponseWriter, r *http.Request)`\n      - Description: Returns mocked verification data for a given image ID.\n    - `respondWithError(w http.ResponseWriter, code int, message string)`: Internal helper function.\n      - Signature: `func respondWithError(w http.ResponseWriter, code int, message string)`\n      - Description: Writes a JSON error response with the specified HTTP status code and message.\n    - `respondWithJSON(w http.ResponseWriter, code int, payload interface{})`: Internal helper function.\n      - Signature: `func respondWithJSON(w http.ResponseWriter, code int, payload interface{})`\n      - Description: Writes a JSON response with the specified HTTP status code and payload.\n- Notable Patterns or Logic:\n  - **Mocked Endpoints**: Several endpoints (`GetImageSBOMs`, `GetImageCVEs`, `GetImageVerification`) return hardcoded, mocked data, indicating future database integration.\n  - **Request/Response Handling**: Uses `encoding/json` for marshalling/unmarshalling and `github.com/go-chi/chi/v5` for URL parameter extraction.\n  - **Error Handling**: Centralized `respondWithError` and `respondWithJSON` helpers for consistent API responses.\n",
  "backend/internal/adapter/handler/http/middleware/auth.go": "- File Path: `backend/internal/adapter/handler/http/middleware/auth.go`\n- High-Level Purpose: This file provides a mock authentication middleware for HTTP requests, designed to check for a hardcoded API key or a mock JWT bearer token.\n- Definitions in the File:\n  - **Variables / Constants**:\n    - `mockAPIKey` (string): Constant string \"mock-api-key\" for API key authentication.\n    - `mockJWTToken` (string): Constant string \"mock-jwt-token\" for JWT bearer token authentication.\n  - **Functions**:\n    - `Authenticator(next http.Handler)`: Public function.\n      - Signature: `func Authenticator(next http.Handler) http.Handler`\n      - Description: An HTTP middleware that checks incoming requests for either an `X-API-Key` header matching `mockAPIKey` or an `Authorization: Bearer` header matching `mockJWTToken`. If either is present and valid, the request proceeds to the next handler; otherwise, it responds with `http.StatusUnauthorized`.\n- Notable Patterns or Logic:\n  - **HTTP Middleware**: Implements `http.Handler` to wrap other handlers, providing cross-cutting concerns like authentication.\n  - **Mock Authentication**: Uses hardcoded values for demonstration purposes, not suitable for production.\n  - **Header-Based Authentication**: Checks standard HTTP headers for authentication credentials.\n",
  "backend/internal/adapter/handler/http/server.go": "- File Path: `backend/internal/adapter/handler/http/server.go`\n- High-Level Purpose: This file configures and sets up the main HTTP router for the backend application, including common middleware and all API routes for images, customers, builds, and webhooks.\n- Definitions in the File:\n  - **Structs**:\n    - `Server`: Represents the HTTP server and its components.\n      - Fields: `Router` (*chi.Mux), `ImageHandler` (*ImageHandler), `CustomerHandler` (*CustomerHandler), `BuildHandler` (*BuildHandler), `WebhookHandler` (*WebhookHandler), `Logger` (zerolog.Logger).\n  - **Functions**:\n    - `NewServer(...)`: Public function.\n      - Signature: `func NewServer(...) *Server`\n      - Description: Constructor for `Server`, taking various use case dependencies and a logger. It initializes the `chi.Mux` router, creates handler instances, and calls `setupRoutes` to configure the routing.\n    - `setupRoutes()`: Internal method on `Server`.\n      - Signature: `func (s *Server) setupRoutes()`\n      - Description: Configures the `chi.Mux` router with global middleware (RequestID, RealIP, Logger, Recoverer, Timeout) and defines all API endpoints. It includes a public `/health` endpoint and an authenticated `/v1` route group for image, customer, build, and webhook operations.\n    - `ServeHTTP(w http.ResponseWriter, r *http.Request)`: Public method on `Server`.\n      - Signature: `func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request)`\n      - Description: Implements the `http.Handler` interface, delegating requests to the configured `chi.Mux` router.\n    - `Shutdown(ctx context.Context)`: Public method on `Server`.\n      - Signature: `func (s *Server) Shutdown(ctx context.Context) error`\n      - Description: A placeholder method for any custom graceful shutdown logic for the server, currently just logs a message.\n- Notable Patterns or Logic:\n  - **HTTP Router**: Uses `github.com/go-chi/chi/v5` for routing.\n  - **Middleware Chain**: Applies a series of standard `chi` middleware for logging, request ID, recovery, and timeouts.\n  - **API Versioning**: Routes are grouped under `/v1`.\n  - **Authentication Middleware**: Applies the custom `middleware.Authenticator` to all `/v1` API routes.\n  - **Dependency Injection**: Handlers are injected into the `Server` struct, and the `setupRoutes` method wires them to specific paths.\n",
  "backend/internal/adapter/handler/http/webhook_handler.go": "- File Path: `backend/internal/adapter/handler/http/webhook_handler.go`\n- High-Level Purpose: This file defines HTTP handlers for webhook endpoints, specifically for triggering image builds from an upstream system.\n- Definitions in the File:\n  - **Structs**:\n    - `WebhookHandler`: Handles HTTP requests related to webhooks.\n      - Fields: `usecase` (*usecase.ImageUsecase).\n    - `UpstreamWebhookRequest`: Represents the payload for an upstream webhook request.\n      - Fields: `TenantNamespace` (string).\n  - **Functions**:\n    - `NewWebhookHandler(uc *usecase.ImageUsecase)`: Public function.\n      - Signature: `func NewWebhookHandler(uc *usecase.ImageUsecase) *WebhookHandler`\n      - Description: Constructor for `WebhookHandler`, injecting an `ImageUsecase` dependency.\n    - `TriggerUpstreamBuild(w http.ResponseWriter, r *http.Request)`: Public method on `WebhookHandler`.\n      - Signature: `func (h *WebhookHandler) TriggerUpstreamBuild(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles POST requests to `/webhooks/upstream`. It decodes the request payload, validates the `TenantNamespace`, calls the `ImageUsecase` to create and trigger a build, and responds with the created build event or an error.\n",
  "backend/internal/adapter/postgres/audit_log_repository.go": "- File Path: `backend/internal/adapter/postgres/audit_log_repository.go`\n- High-Level Purpose: This file provides a PostgreSQL implementation of the `AuditLogRepository` interface, handling database interactions for audit log data.\n- Definitions in the File:\n  - **Structs**:\n    - `pgAuditLogRepository`: PostgreSQL-specific implementation of `AuditLogRepository`.\n      - Fields: `db` (*pgxpool.Pool).\n  - **Functions**:\n    - `NewAuditLogRepository(db *pgxpool.Pool)`: Public function.\n      - Signature: `func NewAuditLogRepository(db *pgxpool.Pool) repository.AuditLogRepository`\n      - Description: Constructor for `pgAuditLogRepository`, taking a `pgxpool.Pool` for database access.\n    - `Create(ctx context.Context, log *domain.AuditLog)`: Public method on `pgAuditLogRepository`.\n      - Signature: `func (r *pgAuditLogRepository) Create(ctx context.Context, log *domain.AuditLog) error`\n      - Description: Inserts a new audit log record into the `audit_logs` table. It marshals the `Details` field of the `AuditLog` struct into a JSONB string before insertion.\n",
  "backend/internal/adapter/postgres/build_event_repository.go": "- File Path: `backend/internal/adapter/postgres/build_event_repository.go`\n- High-Level Purpose: This file provides a PostgreSQL implementation of the `BuildEventRepository` interface, handling database interactions for build event data.\n- Definitions in the File:\n  - **Structs**:\n    - `pgBuildEventRepository`: PostgreSQL-specific implementation of `BuildEventRepository`.\n      - Fields: `db` (*pgxpool.Pool).\n  - **Functions**:\n    - `NewBuildEventRepository(db *pgxpool.Pool)`: Public function.\n      - Signature: `func NewBuildEventRepository(db *pgxpool.Pool) repository.BuildEventRepository`\n      - Description: Constructor for `pgBuildEventRepository`, taking a `pgxpool.Pool` for database access.\n    - `Create(ctx context.Context, event *domain.BuildEvent)`: Public method on `pgBuildEventRepository`.\n      - Signature: `func (r *pgBuildEventRepository) Create(ctx context.Context, event *domain.BuildEvent) (int, error)`\n      - Description: Inserts a new build event record into the `build_events` table and returns its generated ID, `created_at`, and `updated_at` timestamps.\n    - `FindByID(ctx context.Context, id int)`: Public method on `pgBuildEventRepository`.\n      - Signature: `func (r *pgBuildEventRepository) FindByID(ctx context.Context, id int) (*domain.BuildEvent, error)`\n      - Description: Queries the `build_events` table to retrieve a single build event by its `id`.\n    - `Update(ctx context.Context, event *domain.BuildEvent)`: Public method on `pgBuildEventRepository`.\n      - Signature: `func (r *pgBuildEventRepository) Update(ctx context.Context, event *domain.BuildEvent) error`\n      - Description: Updates the `image_id` and `status` fields of an existing build event record in the `build_events` table.\n",
  "backend/internal/adapter/postgres/customer_image_usage_repository.go": "- File Path: `backend/internal/adapter/postgres/customer_image_usage_repository.go`\n- High-Level Purpose: This file is a placeholder for the PostgreSQL implementation of the `CustomerImageUsageRepository` interface. It indicates that the repository is defined but its concrete database interaction logic is not yet implemented in this step.\n- Definitions in the File: None.\n- Notable Patterns or Logic:\n  - **Placeholder**: Contains a comment explicitly stating it's a placeholder for future implementation.\n",
  "backend/internal/adapter/postgres/customer_repository.go": "- File Path: `backend/internal/adapter/postgres/customer_repository.go`\n- High-Level Purpose: This file provides a PostgreSQL implementation of the `CustomerRepository` interface, handling database interactions for customer data.\n- Definitions in the File:\n  - **Structs**:\n    - `pgCustomerRepository`: PostgreSQL-specific implementation of `CustomerRepository`.\n      - Fields: `db` (*pgxpool.Pool).\n  - **Functions**:\n    - `NewCustomerRepository(db *pgxpool.Pool)`: Public function.\n      - Signature: `func NewCustomerRepository(db *pgxpool.Pool) repository.CustomerRepository`\n      - Description: Constructor for `pgCustomerRepository`, taking a `pgxpool.Pool` for database access.\n    - `FindAll(ctx context.Context)`: Public method on `pgCustomerRepository`.\n      - Signature: `func (r *pgCustomerRepository) FindAll(ctx context.Context) ([]*domain.Customer, error)`\n      - Description: Queries the `customers` table to retrieve all customer records, mapping them to `domain.Customer` structs.\n    - `FindByNamespace(ctx context.Context, namespace string)`: Public method on `pgCustomerRepository`.\n      - Signature: `func (r *pgCustomerRepository) FindByNamespace(ctx context.Context, namespace string) (*domain.Customer, error)`\n      - Description: Queries the `customers` table to retrieve a single customer by their `namespace`. Returns `nil, nil` if no rows are found.\n",
  "backend/internal/adapter/postgres/cve_finding_repository.go": "- File Path: `backend/internal/adapter/postgres/cve_finding_repository.go`\n- High-Level Purpose: This file provides a PostgreSQL implementation of the `CVEFindingRepository` interface, specifically designed for efficient batch insertion of CVE findings.\n- Definitions in the File:\n  - **Structs**:\n    - `pgCVEFindingRepository`: PostgreSQL-specific implementation of `CVEFindingRepository`.\n      - Fields: `db` (*pgxpool.Pool).\n  - **Functions**:\n    - `NewCVEFindingRepository(db *pgxpool.Pool)`: Public function.\n      - Signature: `func NewCVEFindingRepository(db *pgxpool.Pool) repository.CVEFindingRepository`\n      - Description: Constructor for `pgCVEFindingRepository`, taking a `pgxpool.Pool` for database access.\n    - `CreateBatch(ctx context.Context, cves []*domain.CVEFinding)`: Public method on `pgCVEFindingRepository`.\n      - Signature: `func (r *pgCVEFindingRepository) CreateBatch(ctx context.Context, cves []*domain.CVEFinding) error`\n      - Description: Inserts multiple `CVEFinding` records into the `cve_findings` table using a single `pgx.Batch` operation for performance.\n- Notable Patterns or Logic:\n  - **Batch Insertion**: Utilizes `pgx.Batch` to send multiple `INSERT` statements to the database in a single round trip, significantly improving performance for bulk data operations.\n",
  "backend/internal/adapter/postgres/db.go": "- File Path: `backend/internal/adapter/postgres/db.go`\n- High-Level Purpose: This file provides a utility function to establish and test a connection to a PostgreSQL database using `pgxpool`.\n- Definitions in the File:\n  - **Functions**:\n    - `NewConnection(ctx context.Context, connString string)`: Public function.\n      - Signature: `func NewConnection(ctx context.Context, connString string) (*pgxpool.Pool, error)`\n      - Description: Creates a new PostgreSQL connection pool using the provided connection string. It also pings the database to verify the connection before returning the pool.\n",
  "backend/internal/adapter/postgres/image_repository.go": "- File Path: `backend/internal/adapter/postgres/image_repository.go`\n- High-Level Purpose: This file provides a PostgreSQL implementation of the `ImageRepository` interface, handling database interactions for image data.\n- Definitions in the File:\n  - **Structs**:\n    - `pgImageRepository`: PostgreSQL-specific implementation of `ImageRepository`.\n      - Fields: `db` (*pgxpool.Pool).\n  - **Functions**:\n    - `NewImageRepository(db *pgxpool.Pool)`: Public function.\n      - Signature: `func NewImageRepository(db *pgxpool.Pool) repository.ImageRepository`\n      - Description: Constructor for `pgImageRepository`, taking a `pgxpool.Pool` for database access.\n    - `FindAll(ctx context.Context)`: Public method on `pgImageRepository`.\n      - Signature: `func (r *pgImageRepository) FindAll(ctx context.Context) ([]*domain.Image, error)`\n      - Description: Queries the `images` table to retrieve all image records, mapping them to `domain.Image` structs. Handles `TEXT[]` for tags using `pq.StringArray`.\n    - `FindByID(ctx context.Context, id int)`: Public method on `pgImageRepository`.\n      - Signature: `func (r *pgImageRepository) FindByID(ctx context.Context, id int) (*domain.Image, error)`\n      - Description: Queries the `images` table to retrieve a single image by its `id`. Returns `nil, nil` if no rows are found.\n    - `Create(ctx context.Context, image *domain.Image)`: Public method on `pgImageRepository`.\n      - Signature: `func (r *pgImageRepository) Create(ctx context.Context, image *domain.Image) (int, error)`\n      - Description: Inserts a new image record into the `images` table and returns the newly generated ID, `created_at`, and `updated_at` timestamps.\n- Notable Patterns or Logic:\n  - Uses `github.com/lib/pq` for `pq.StringArray` to handle PostgreSQL array types (`TEXT[]`).\n  - Explicitly handles `pgx.ErrNoRows` to return `nil, nil` for \"not found\" scenarios, distinguishing them from actual database errors.\n",
  "backend/internal/adapter/postgres/notification_repository.go": "- File Path: `backend/internal/adapter/postgres/notification_repository.go`\n- High-Level Purpose: This file is a placeholder for the PostgreSQL implementation of the `NotificationRepository` interface. It indicates that the repository is defined but its concrete database interaction logic is not yet implemented in this step.\n- Definitions in the File: None.\n- Notable Patterns or Logic:\n  - **Placeholder**: Contains a comment explicitly stating it's a placeholder for future implementation.\n",
  "backend/internal/adapter/postgres/sbom_record_repository.go": "- File Path: `backend/internal/adapter/postgres/sbom_record_repository.go`\n- High-Level Purpose: This file provides a PostgreSQL implementation of the `SBOMRecordRepository` interface, handling database interactions for SBOM record data.\n- Definitions in the File:\n  - **Structs**:\n    - `pgSBOMRecordRepository`: PostgreSQL-specific implementation of `SBOMRecordRepository`.\n      - Fields: `db` (*pgxpool.Pool).\n  - **Functions**:\n    - `NewSBOMRecordRepository(db *pgxpool.Pool)`: Public function.\n      - Signature: `func NewSBOMRecordRepository(db *pgxpool.Pool) repository.SBOMRecordRepository`\n      - Description: Constructor for `pgSBOMRecordRepository`, taking a `pgxpool.Pool` for database access.\n    - `Create(ctx context.Context, sbom *domain.SBOMRecord)`: Public method on `pgSBOMRecordRepository`.\n      - Signature: `func (r *pgSBOMRecordRepository) Create(ctx context.Context, sbom *domain.SBOMRecord) error`\n      - Description: Inserts a new SBOM record into the `sbom_records` table.\n",
  "backend/internal/adapter/postgres/sla_violation_repository.go": "- File Path: `backend/internal/adapter/postgres/sla_violation_repository.go`\n- High-Level Purpose: This file provides a PostgreSQL implementation of the `SLAViolationRepository` interface, handling database interactions for SLA violation data.\n- Definitions in the File:\n  - **Structs**:\n    - `pgSLAViolationRepository`: PostgreSQL-specific implementation of `SLAViolationRepository`.\n      - Fields: `db` (*pgxpool.Pool).\n  - **Functions**:\n    - `NewSLAViolationRepository(db *pgxpool.Pool)`: Public function.\n      - Signature: `func NewSLAViolationRepository(db *pgxpool.Pool) repository.SLAViolationRepository`\n      - Description: Constructor for `pgSLAViolationRepository`, taking a `pgxpool.Pool` for database access.\n    - `Create(ctx context.Context, violation *domain.SLAViolation)`: Public method on `pgSLAViolationRepository`.\n      - Signature: `func (r *pgSLAViolationRepository) Create(ctx context.Context, violation *domain.SLAViolation) error`\n      - Description: Inserts a new SLA violation record into the `sla_violations` table.\n",
  "backend/internal/adapter/simulator/orchestrator.go": "- File Path: `backend/internal/adapter/simulator/orchestrator.go`\n- High-Level Purpose: This file defines an interface for a build orchestrator and provides a mock implementation to simulate triggering image builds without interacting with a real CI/CD system.\n- Definitions in the File:\n  - **Interfaces**:\n    - `BuildOrchestrator`: Defines the contract for triggering image builds.\n      - Methods:\n        - `TriggerBuild(ctx context.Context, event *domain.BuildEvent) error`: Triggers a build process based on a `BuildEvent`.\n  - **Structs**:\n    - `MockBuildOrchestrator`: A mock implementation of `BuildOrchestrator`.\n  - **Functions**:\n    - `NewMockBuildOrchestrator()`: Public function.\n      - Signature: `func NewMockBuildOrchestrator() BuildOrchestrator`\n      - Description: Constructor for `MockBuildOrchestrator`.\n    - `TriggerBuild(ctx context.Context, event *domain.BuildEvent)`: Public method on `MockBuildOrchestrator`.\n      - Signature: `func (m *MockBuildOrchestrator) TriggerBuild(ctx context.Context, event *domain.BuildEvent) error`\n      - Description: Simulates triggering a build by logging the event details. It explicitly states that a real system would integrate with a CI/CD system.\n- Notable Patterns or Logic:\n  - **Mocking**: Provides a mock implementation for an external dependency (`BuildOrchestrator`), allowing the application to function without a real CI/CD integration during development or for MVP purposes.\n  - **Interface-based Design**: Uses an interface to decouple the business logic from the specific build orchestration implementation.",
  "backend/internal/domain/audit_log.go": "- File Path: `backend/internal/domain/audit_log.go`\n- High-Level Purpose: This file defines the `AuditLog` data structure, representing an entry in the system's audit trail.\n- Definitions in the File:\n  - **Structs**:\n    - `AuditLog`: Represents a single audit log entry.\n      - Fields:\n        - `ID` (int): Unique identifier for the audit log entry.\n        - `TenantNamespace` (string): Namespace of the tenant/customer related to the action.\n        - `Action` (string): Description of the action performed (e.g., \"image_published\", \"build_triggered\").\n        - `Actor` (string): Identifier of the entity that performed the action (e.g., user ID, API key ID, \"system\").\n        - `Details` (map[string]interface{}): A flexible map to store additional, structured details about the action.\n        - `Timestamp` (time.Time): Timestamp when the audit log entry was created.\n- Notable Patterns or Logic:\n  - Uses `json:\"...\"` tags for JSON serialization/deserialization.\n  - `Details` field uses `map[string]interface{}` for a flexible, schema-less way to store event-specific data, which will be marshaled to JSON in the database.\n",
  "backend/internal/domain/build_event.go": "- File Path: `backend/internal/domain/build_event.go`\n- High-Level Purpose: This file defines the `BuildEvent` data structure, representing a record of an image build process within the secure image service.\n- Definitions in the File:\n  - **Structs**:\n    - `BuildEvent`: Represents an event related to an image build.\n      - Fields:\n        - `ID` (int): Unique identifier for the build event.\n        - `TenantNamespace` (string): Namespace of the tenant/customer for whom the build was triggered.\n        - `ImageID` (*int): Optional pointer to the ID of the image produced by this build (can be null if not yet completed).\n        - `TriggerType` (string): The mechanism that triggered the build (e.g., \"api\", \"webhook\", \"manual\").\n        - `Status` (string): Current status of the build (e.g., \"pending\", \"completed\", \"failed\").\n        - `CreatedAt` (time.Time): Timestamp when the build event record was created.\n        - `UpdatedAt` (time.Time): Timestamp when the build event record was last updated.\n- Notable Patterns or Logic:\n  - Uses `json:\"...\"` tags for JSON serialization/deserialization.\n  - `ImageID` is a pointer (`*int`) to allow it to be `null` in the database before an image is successfully created.\n",
  "backend/internal/domain/customer.go": "- File Path: `backend/internal/domain/customer.go`\n- High-Level Purpose: This file defines the `Customer` data structure, representing the core domain model for a customer or tenant within the secure image service.\n- Definitions in the File:\n  - **Structs**:\n    - `Customer`: Represents a customer entity.\n      - Fields:\n        - `Namespace` (string): Unique identifier for the customer (e.g., tenant ID).\n        - `Name` (string): Full name of the customer.\n        - `ContactInfo` (string): Contact details for the customer.\n        - `SLATier` (string): Service Level Agreement tier for the customer.\n        - `CreatedAt` (time.Time): Timestamp when the customer record was created.\n        - `UpdatedAt` (time.Time): Timestamp when the customer record was last updated.\n- Notable Patterns or Logic:\n  - Uses `json:\"...\"` tags for JSON serialization/deserialization.\n",
  "backend/internal/domain/customer_image_usage.go": "- File Path: `backend/internal/domain/customer_image_usage.go`\n- High-Level Purpose: This file defines the `CustomerImageUsage` data structure, representing a record of how a customer is utilizing a specific image within their environment.\n- Definitions in the File:\n  - **Structs**:\n    - `CustomerImageUsage`: Represents a record of an image being used by a customer.\n      - Fields:\n        - `ID` (int): Unique identifier for the usage record.\n        - `TenantNamespace` (string): Foreign key referencing the customer/tenant.\n        - `ImageID` (int): Foreign key referencing the image being used.\n        - `VersionPinned` (bool): Indicates if the image version is pinned (true) or floating (false).\n        - `RuntimeInfo` (string): Additional information about the runtime environment (e.g., cluster name, environment).\n        - `CreatedAt` (time.Time): Timestamp when the usage record was created.\n- Notable Patterns or Logic:\n  - Uses `json:\"...\"` tags for JSON serialization/deserialization.\n",
  "backend/internal/domain/cve_finding.go": "- File Path: `backend/internal/domain/cve_finding.go`\n- High-Level Purpose: This file defines the `CVEFinding` data structure, representing a Common Vulnerabilities and Exposures finding associated with an image.\n- Definitions in the File:\n  - **Structs**:\n    - `CVEFinding`: Represents a CVE finding for an image.\n      - Fields:\n        - `ID` (int): Unique identifier for the CVE finding.\n        - `ImageID` (int): Foreign key referencing the associated image.\n        - `CVEID` (string): The identifier of the CVE (e.g., \"CVE-2023-12345\").\n        - `Severity` (string): The severity level of the CVE (e.g., \"Critical\", \"High\", \"Medium\", \"Low\").\n        - `Description` (string): A brief description of the vulnerability.\n        - `FixAvailable` (bool): Indicates whether a fix is available for the CVE.\n        - `CreatedAt` (time.Time): Timestamp when the CVE finding record was created.\n- Notable Patterns or Logic:\n  - Uses `json:\"...\"` tags for JSON serialization/deserialization.\n",
  "backend/internal/domain/image.go": "- File Path: `backend/internal/domain/image.go`\n- High-Level Purpose: This file defines the `Image` data structure, representing the core domain model for an image within the secure image service.\n- Definitions in the File:\n  - **Structs**:\n    - `Image`: Represents an image entity.\n      - Fields:\n        - `ID` (int): Unique identifier for the image.\n        - `TenantNamespace` (string): Namespace of the tenant/customer owning the image.\n        - `Digest` (string): Cryptographic digest of the image content.\n        - `Tags` ([]string): List of tags associated with the image.\n        - `SLSALevel` (int): SLSA (Supply-chain Levels for Software Artifacts) level of the image.\n        - `CreatedAt` (time.Time): Timestamp when the image record was created.\n        - `UpdatedAt` (time.Time): Timestamp when the image record was last updated.\n- Notable Patterns or Logic:\n  - Uses `json:\"...\"` tags for JSON serialization/deserialization.\n",
  "backend/internal/domain/notification.go": "- File Path: `backend/internal/domain/notification.go`\n- High-Level Purpose: This file defines the `Notification` data structure, representing a system notification within the secure image service.\n- Definitions in the File:\n  - **Structs**:\n    - `Notification`: Represents a notification event.\n      - Fields:\n        - `ID` (int): Unique identifier for the notification.\n        - `TenantNamespace` (string): Namespace of the tenant/customer the notification is for.\n        - `Type` (string): The category of the notification (e.g., \"SLA_VIOLATION\", \"BUILD_COMPLETE\").\n        - `Payload` (string): The content or details of the notification.\n        - `SentAt` (time.Time): Timestamp when the notification was sent.\n        - `Status` (string): Current status of the notification (e.g., \"sent\", \"failed\").\n- Notable Patterns or Logic:\n  - Uses `json:\"...\"` tags for JSON serialization/deserialization.\n",
  "backend/internal/domain/sbom_record.go": "- File Path: `backend/internal/domain/sbom_record.go`\n- High-Level Purpose: This file defines the `SBOMRecord` data structure, representing a Software Bill of Materials record associated with an image.\n- Definitions in the File:\n  - **Structs**:\n    - `SBOMRecord`: Represents an SBOM record for an image.\n      - Fields:\n        - `ID` (int): Unique identifier for the SBOM record.\n        - `ImageID` (int): Foreign key referencing the associated image.\n        - `Format` (string): The format of the SBOM (e.g., \"SPDX\", \"CycloneDX\").\n        - `URI` (string): The URI where the SBOM content can be accessed (e.g., MinIO path).\n        - `CreatedAt` (time.Time): Timestamp when the SBOM record was created.\n- Notable Patterns or Logic:\n  - Uses `json:\"...\"` tags for JSON serialization/deserialization.\n",
  "backend/internal/domain/sla_violation.go": "- File Path: `backend/internal/domain/sla_violation.go`\n- High-Level Purpose: This file defines the `SLAViolation` data structure, representing a record of a Service Level Agreement violation related to a CVE finding.\n- Definitions in the File:\n  - **Structs**:\n    - `SLAViolation`: Represents an SLA violation.\n      - Fields:\n        - `ID` (int): Unique identifier for the SLA violation.\n        - `TenantNamespace` (string): Namespace of the tenant/customer associated with the violation.\n        - `CVEFindingID` (int): Foreign key referencing the specific CVE finding that caused the violation.\n        - `Status` (string): Current status of the violation (e.g., \"active\", \"resolved\").\n        - `CreatedAt` (time.Time): Timestamp when the violation record was created.\n        - `ResolvedAt` (time.Time): Optional timestamp when the violation was resolved.\n- Notable Patterns or Logic:\n  - Uses `json:\"...\"` tags for JSON serialization/deserialization.\n",
  "backend/internal/repository/audit_log.go": "- File Path: `backend/internal/repository/audit_log.go`\n- High-Level Purpose: This file defines the interface for interacting with audit log data storage, abstracting the underlying database implementation.\n- Definitions in the File:\n  - **Interfaces**:\n    - `AuditLogRepository`: Defines methods for accessing and managing audit log records.\n      - Methods:\n        - `Create(ctx context.Context, log *domain.AuditLog) error`: Creates a new audit log record.\n",
  "backend/internal/repository/build_event.go": "- File Path: `backend/internal/repository/build_event.go`\n- High-Level Purpose: This file defines the interface for interacting with build event data storage, abstracting the underlying database implementation.\n- Definitions in the File:\n  - **Interfaces**:\n    - `BuildEventRepository`: Defines methods for accessing and managing build events.\n      - Methods:\n        - `Create(ctx context.Context, event *domain.BuildEvent) (int, error)`: Creates a new build event and returns its ID.\n        - `FindByID(ctx context.Context, id int) (*domain.BuildEvent, error)`: Retrieves a single build event by its ID.\n        - `Update(ctx context.Context, event *domain.BuildEvent) error`: Updates an existing build event.\n",
  "backend/internal/repository/customer.go": "- File Path: `backend/internal/repository/customer.go`\n- High-Level Purpose: This file defines the interface for interacting with customer data storage, abstracting the underlying database implementation.\n- Definitions in the File:\n  - **Interfaces**:\n    - `CustomerRepository`: Defines methods for accessing customer data.\n      - Methods:\n        - `FindAll(ctx context.Context) ([]*domain.Customer, error)`: Retrieves all customers.\n        - `FindByNamespace(ctx context.Context, namespace string) (*domain.Customer, error)`: Retrieves a single customer by their namespace.\n",
  "backend/internal/repository/customer_image_usage.go": "- File Path: `backend/internal/repository/customer_image_usage.go`\n- High-Level Purpose: This file defines the interface for interacting with customer image usage data storage, abstracting the underlying database implementation.\n- Definitions in the File:\n  - **Interfaces**:\n    - `CustomerImageUsageRepository`: Defines methods for accessing and managing customer image usage records.\n      - Methods:\n        - `Create(ctx context.Context, usage *domain.CustomerImageUsage) error`: Creates a new customer image usage record.\n        - `FindByTenant(ctx context.Context, tenantNamespace string) ([]*domain.CustomerImageUsage, error)`: Retrieves all image usage records for a given tenant.\n",
  "backend/internal/repository/cve_finding.go": "- File Path: `backend/internal/repository/cve_finding.go`\n- High-Level Purpose: This file defines the interface for interacting with CVE (Common Vulnerabilities and Exposures) finding data storage, abstracting the underlying database implementation.\n- Definitions in the File:\n  - **Interfaces**:\n    - `CVEFindingRepository`: Defines methods for accessing and managing CVE findings.\n      - Methods:\n        - `CreateBatch(ctx context.Context, cves []*domain.CVEFinding) error`: Creates multiple CVE finding records in a batch.\n",
  "backend/internal/repository/image.go": "- File Path: `backend/internal/repository/image.go`\n- High-Level Purpose: This file defines the interface for interacting with image data storage, abstracting the underlying database implementation.\n- Definitions in the File:\n  - **Interfaces**:\n    - `ImageRepository`: Defines methods for accessing and managing image data.\n      - Methods:\n        - `FindAll(ctx context.Context) ([]*domain.Image, error)`: Retrieves all images.\n        - `FindByID(ctx context.Context, id int) (*domain.Image, error)`: Retrieves a single image by its ID.\n        - `Create(ctx context.Context, image *domain.Image) (int, error)`: Creates a new image record and returns its ID.\n",
  "backend/internal/repository/notification.go": "- File Path: `backend/internal/repository/notification.go`\n- High-Level Purpose: This file defines the interface for interacting with notification data storage, abstracting the underlying database implementation.\n- Definitions in the File:\n  - **Interfaces**:\n    - `NotificationRepository`: Defines methods for accessing and managing notification records.\n      - Methods:\n        - `Create(ctx context.Context, notification *domain.Notification) error`: Creates a new notification record.\n",
  "backend/internal/repository/sbom_record.go": "- File Path: `backend/internal/repository/sbom_record.go`\n- High-Level Purpose: This file defines the interface for interacting with SBOM (Software Bill of Materials) record data storage, abstracting the underlying database implementation.\n- Definitions in the File:\n  - **Interfaces**:\n    - `SBOMRecordRepository`: Defines methods for accessing and managing SBOM records.\n      - Methods:\n        - `Create(ctx context.Context, sbom *domain.SBOMRecord) error`: Creates a new SBOM record.\n",
  "backend/internal/repository/sla_violation.go": "- File Path: `backend/internal/repository/sla_violation.go`\n- High-Level Purpose: This file defines the interface for interacting with SLA (Service Level Agreement) violation data storage, abstracting the underlying database implementation.\n- Definitions in the File:\n  - **Interfaces**:\n    - `SLAViolationRepository`: Defines methods for accessing and managing SLA violation records.\n      - Methods:\n        - `Create(ctx context.Context, violation *domain.SLAViolation) error`: Creates a new SLA violation record.\n",
  "backend/internal/usecase/audit_usecase.go": "- File Path: `backend/internal/usecase/audit_usecase.go`\n- High-Level Purpose: This file implements the business logic for creating and managing audit log entries.\n- Definitions in the File:\n  - **Structs**:\n    - `AuditUsecase`: Encapsulates audit logging business logic.\n      - Fields: `repo` (repository.AuditLogRepository).\n  - **Functions**:\n    - `NewAuditUsecase(repo repository.AuditLogRepository)`: Public function.\n      - Signature: `func NewAuditUsecase(repo repository.AuditLogRepository) *AuditUsecase`\n      - Description: Constructor for `AuditUsecase`, injecting an `AuditLogRepository` dependency.\n    - `Log(ctx context.Context, namespace, action, actor string, details map[string]interface{})`: Public method on `AuditUsecase`.\n      - Signature: `func (uc *AuditUsecase) Log(ctx context.Context, namespace, action, actor string, details map[string]interface{}) error`\n      - Description: Creates a new `domain.AuditLog` entry with the provided details and delegates its persistence to the underlying `AuditLogRepository`.\n",
  "backend/internal/usecase/build_usecase.go": "- File Path: `backend/internal/usecase/build_usecase.go`\n- High-Level Purpose: This file implements the business logic for completing an image build process, which involves creating a new image record, associating SBOMs and CVE findings, and updating the build event status.\n- Definitions in the File:\n  - **Structs**:\n    - `BuildCompletionRequest`: Represents the payload for completing a build.\n      - Fields: `ImageDigest` (string), `Tags` ([]string), `SLSALevel` (int), `SBOMs` ([]SBOMInput), `CVEs` ([]CVEFindingInput).\n    - `SBOMInput`: Represents an SBOM record provided during build completion.\n      - Fields: `Format` (string), `URI` (string).\n    - `CVEFindingInput`: Represents a CVE finding provided during build completion.\n      - Fields: `CVEID` (string), `Severity` (string), `Description` (string), `FixAvailable` (bool).\n    - `BuildUsecase`: Encapsulates build completion business logic.\n      - Fields: `buildRepo` (repository.BuildEventRepository), `imageRepo` (repository.ImageRepository), `sbomRepo` (repository.SBOMRecordRepository), `cveRepo` (repository.CVEFindingRepository).\n  - **Functions**:\n    - `NewBuildUsecase(...)`: Public function.\n      - Signature: `func NewBuildUsecase(...) *BuildUsecase`\n      - Description: Constructor for `BuildUsecase`, injecting dependencies for build event, image, SBOM, and CVE finding repositories.\n    - `CompleteBuild(ctx context.Context, buildID int, req BuildCompletionRequest)`: Public method on `BuildUsecase`.\n      - Signature: `func (uc *BuildUsecase) CompleteBuild(ctx context.Context, buildID int, req BuildCompletionRequest) (*domain.Image, error)`\n      - Description: Orchestrates the build completion process:\n        1. Finds and validates the build event's status.\n        2. Creates a new `domain.Image` record.\n        3. Creates associated `SBOMRecord` entries.\n        4. Creates associated `CVEFinding` entries (using batch insertion).\n        5. Updates the original `BuildEvent` to \"completed\" and links it to the new image.\n      - Returns the newly created `domain.Image` or an error if any step fails.\n- Notable Patterns or Logic:\n  - **Transactional Logic**: The `CompleteBuild` method performs a sequence of dependent database operations. The comment `// In a real system, we'd want transactional behavior here` indicates that this sequence ideally should be wrapped in a database transaction to ensure atomicity.\n  - **Orchestration**: This use case acts as an orchestrator, coordinating operations across multiple repositories to fulfill a complex business process.\n  - **Input Structs**: Defines specific input structs (`SBOMInput`, `CVEFindingInput`) for the completion request payload.\n",
  "backend/internal/usecase/customer_usecase.go": "- File Path: `backend/internal/usecase/customer_usecase.go`\n- High-Level Purpose: This file implements the business logic for customer-related operations, acting as an intermediary between handlers and the customer repository.\n- Definitions in the File:\n  - **Structs**:\n    - `CustomerUsecase`: Encapsulates customer-related business logic.\n      - Fields: `repo` (repository.CustomerRepository).\n  - **Functions**:\n    - `NewCustomerUsecase(repo repository.CustomerRepository)`: Public function.\n      - Signature: `func NewCustomerUsecase(repo repository.CustomerRepository) *CustomerUsecase`\n      - Description: Constructor for `CustomerUsecase`, injecting a `CustomerRepository` dependency.\n    - `ListCustomers(ctx context.Context)`: Public method on `CustomerUsecase`.\n      - Signature: `func (uc *CustomerUsecase) ListCustomers(ctx context.Context) ([]*domain.Customer, error)`\n      - Description: Retrieves a list of all customers by delegating to the underlying repository.\n    - `GetCustomer(ctx context.Context, namespace string)`: Public method on `CustomerUsecase`.\n      - Signature: `func (uc *CustomerUsecase) GetCustomer(ctx context.Context, namespace string) (*domain.Customer, error)`\n      - Description: Retrieves a single customer by namespace by delegating to the underlying repository.\n",
  "backend/internal/usecase/image_usecase.go": "- File Path: `backend/internal/usecase/image_usecase.go`\n- High-Level Purpose: This file implements the business logic for image-related operations, including listing images, retrieving specific images, and initiating new image builds.\n- Definitions in the File:\n  - **Structs**:\n    - `ImageUsecase`: Encapsulates image-related business logic.\n      - Fields: `repo` (repository.ImageRepository), `buildRepo` (repository.BuildEventRepository), `orchestrator` (simulator.BuildOrchestrator), `auditUC` (*AuditUsecase).\n  - **Functions**:\n    - `NewImageUsecase(...)`: Public function.\n      - Signature: `func NewImageUsecase(...) *ImageUsecase`\n      - Description: Constructor for `ImageUsecase`, injecting dependencies for image, build event repositories, a build orchestrator, and an audit use case.\n    - `ListImages(ctx context.Context)`: Public method on `ImageUsecase`.\n      - Signature: `func (uc *ImageUsecase) ListImages(ctx context.Context) ([]*domain.Image, error)`\n      - Description: Retrieves a list of all images by delegating to the underlying image repository.\n    - `GetImage(ctx context.Context, id int)`: Public method on `ImageUsecase`.\n      - Signature: `func (uc *ImageUsecase) GetImage(ctx context.Context, id int) (*domain.Image, error)`\n      - Description: Retrieves a single image by its ID by delegating to the underlying image repository.\n    - `CreateBuild(ctx context.Context, tenantNamespace, triggerType string)`: Public method on `ImageUsecase`.\n      - Signature: `func (uc *ImageUsecase) CreateBuild(ctx context.Context, tenantNamespace, triggerType string) (*domain.BuildEvent, error)`\n      - Description: Creates a new `BuildEvent` record with a \"pending\" status, triggers an asynchronous build process via the `BuildOrchestrator`, and logs an audit event for the build initiation. Returns the newly created `BuildEvent`.\n- Notable Patterns or Logic:\n  - **Dependency Injection**: Relies on injected repository and orchestrator interfaces, and another use case (`AuditUsecase`).\n  - **Asynchronous Operation**: Triggers the build process in a new goroutine (`go uc.orchestrator.TriggerBuild`) to avoid blocking the API request.\n  - **Audit Logging**: Integrates with `AuditUsecase` to record significant actions like build triggers.\n",
  "backend/internal/usecase/sla_usecase.go": "- File Path: `backend/internal/usecase/sla_usecase.go`\n- High-Level Purpose: This file implements the business logic for checking and managing SLA (Service Level Agreement) violations related to CVE findings for customers.\n- Definitions in the File:\n  - **Structs**:\n    - `SLAUsecase`: Encapsulates SLA-related business logic.\n      - Fields: `slaRepo` (repository.SLAViolationRepository), `customerRepo` (repository.CustomerRepository).\n  - **Functions**:\n    - `NewSLAUsecase(...)`: Public function.\n      - Signature: `func NewSLAUsecase(slaRepo repository.SLAViolationRepository, customerRepo repository.CustomerRepository) *SLAUsecase`\n      - Description: Constructor for `SLAUsecase`, injecting dependencies for SLA violation and customer repositories.\n    - `CheckAllViolations(ctx context.Context)`: Public method on `SLAUsecase`.\n      - Signature: `func (uc *SLAUsecase) CheckAllViolations(ctx context.Context) error`\n      - Description: Simulates a background job that iterates through all customers, determines their SLA deadlines based on their tier, and would (in a real implementation) query for critical CVEs older than the deadline to create `SLAViolation` records. Currently, it logs the intent rather than performing actual database queries for CVEs.\n- Notable Patterns or Logic:\n  - **Placeholder Logic**: The `CheckAllViolations` method contains comments indicating that the actual logic for querying CVEs and creating violations is mocked or simplified for the MVP.\n  - **Dependency Injection**: Relies on injected repository interfaces for data access.\n  - **Business Logic Orchestration**: Coordinates operations across multiple repositories (or intended repositories) to implement a business process.\n",
  "backend/pkg/config/config.go": "- File Path: `backend/pkg/config/config.go`\n- High-Level Purpose: This file defines the application's configuration structure and provides a function to load configuration values from environment variables, applying default values where necessary.\n- Definitions in the File:\n  - **Structs**:\n    - `Config`: Represents the application's configuration.\n      - Fields: `DatabaseURL` (string), `APIPort` (string).\n  - **Functions**:\n    - `Load()`: Public function.\n      - Signature: `func Load() (*Config, error)`\n      - Description: Loads configuration settings from environment variables (`API_PORT`, `DATABASE_URL`). It defaults `API_PORT` to \"8080\" if not set or invalid, and returns a pointer to a `Config` struct.\n",
  "backend/pkg/logger/logger.go": "- File Path: `backend/pkg/logger/logger.go`\n- High-Level Purpose: This file provides a utility function to initialize and configure a `zerolog` logger for consistent logging across the application.\n- Definitions in the File:\n  - **Functions**:\n    - `New()`: Public function.\n      - Signature: `func New() zerolog.Logger`\n      - Description: Returns a new `zerolog.Logger` instance configured for console output (stderr), `TraceLevel`, with timestamps.\n",
  "deployments/docker-compose.yml": "- File Path: `deployments/docker-compose.yml`\n- High-Level Purpose: This Docker Compose file defines and configures a multi-service application stack, including a PostgreSQL database, MinIO object storage, the Go backend, and an Nginx frontend.\n- Definitions in the File:\n  - **Services**:\n    - `db`: PostgreSQL database.\n      - Image: `postgres:14-alpine`.\n      - Environment variables for database name, user, and password.\n      - Port mapping: `5432:5432`.\n      - Volumes: `postgres_data` for persistence, `./seed/init.sql` for initialization.\n      - Healthcheck: Ensures the database is ready before dependent services start.\n    - `minio`: MinIO object storage.\n      - Image: `minio/minio:latest`.\n      - Port mapping: `9000:9000` (API), `9001:9001` (console).\n      - Environment variables for root user and password.\n      - Command: `server /data --console-address \":9001\"`.\n      - Volumes: `minio_data` for persistence.\n    - `backend`: Go backend application.\n      - Builds from `../backend/Dockerfile`.\n      - Port mapping: `${API_PORT}:${API_PORT}`.\n      - Depends on `db` being healthy.\n      - Environment variables for `DATABASE_URL` and `API_PORT`.\n      - Loads environment variables from `../.env`.\n    - `frontend`: Nginx web server for the frontend.\n      - Image: `nginx:alpine`.\n      - Port mapping: `80:80`.\n      - Volumes: Mounts `../frontend` directory to serve static files.\n      - Depends on `backend`.\n  - **Volumes**:\n    - `postgres_data`: For PostgreSQL data persistence.\n    - `minio_data`: For MinIO data persistence.\n- Notable Patterns or Logic:\n  - **Multi-service orchestration**: Defines how different parts of the application interact.\n  - **Environment variable usage**: Uses `${VAR_NAME}` syntax to inject values from the host or `.env` file.\n  - **Service healthchecks**: Ensures dependencies are ready before starting services.\n  - **Volume mapping**: Persists data for stateful services.\n",
  "deployments/seed/init.sql": "- File Path: `deployments/seed/init.sql`\n- High-Level Purpose: This SQL script initializes the PostgreSQL database schema for the secure image service and populates it with essential seed data for development and testing.\n- Definitions in the File:\n  - **Database Schema**:\n    - Enables `uuid-ossp` extension.\n    - `TRUNCATE ... RESTART IDENTITY CASCADE`: Clears existing data and resets primary key sequences for specified tables.\n    - **Tables Created**:\n      - `customers`: Stores tenant/customer information (namespace, name, contact, SLA tier).\n      - `images`: Stores image metadata (digest, tags, SLSA level, tenant reference).\n      - `build_events`: Records image build processes (trigger type, status, image reference, tenant reference).\n      - `sbom_records`: Stores Software Bill of Materials records (format, URI, image reference).\n      - `cve_findings`: Stores CVE findings for images (CVE ID, severity, description, fix availability, image reference).\n      - `attestations`: Stores image attestation records (type, URI, image reference).\n      - `customer_image_usage`: (New) Tracks how customers use specific images (version pinned, runtime info, image/tenant reference).\n      - `sla_violations`: (New) Records SLA violations related to CVE findings (CVE finding ID, status, tenant reference).\n      - `notifications`: (New) Stores system notifications (type, JSONB payload, sent status, tenant reference).\n      - `audit_logs`: (New) Stores audit trail entries (action, actor, JSONB details, tenant reference).\n    - **Indexes Created**:\n      - `idx_images_tenant_namespace`, `idx_build_events_tenant_namespace`, `idx_build_events_status`, `idx_sbom_records_image_id`, `idx_cve_findings_image_id`, `idx_attestations_image_id`.\n  - **Seed Data**:\n    - Inserts example data into `customers`, `images`, `sbom_records`, `cve_findings`, `attestations`, `build_events`, `customer_image_usage`, `sla_violations`, and `audit_logs` tables.\n- Notable Patterns or Logic:\n  - **Schema Definition**: Defines all necessary tables with appropriate data types, primary keys, foreign keys, and default values.\n  - **Data Seeding**: Provides initial data to make the application functional immediately after database setup.\n  - **Referential Integrity**: Uses `REFERENCES ... ON DELETE CASCADE` or `ON DELETE SET NULL` for foreign key constraints.\n  - **Special Data Types**: Utilizes `TEXT[]` for array types (e.g., `tags`) and `JSONB` for flexible JSON storage (e.g., `payload`, `details`).\n  - **Timestamp Management**: Uses `TIMESTAMPTZ NOT NULL DEFAULT NOW()` for automatic timestamping.\n",
  "frontend/css/style.css": "- File Path: `frontend/css/style.css`\n- High-Level Purpose: This file defines the cascading stylesheets for the frontend application, controlling its visual presentation, layout, typography, and component styling.\n- Definitions in the File:\n  - **Global Styles**:\n    - `body`: Sets font family, line height, background color, text color, and removes default margin.\n    - `header`: Styles the top navigation bar with background, text color, padding, and flexbox for alignment.\n    - `header h1`, `header h1 a`: Styles the main title and its link.\n  - **Authentication Controls**:\n    - `#auth-controls button`: Styles login/logout buttons with background, color, padding, border-radius, and hover effects.\n  - **Main Content Area**:\n    - `main`: Sets max-width, margin, and padding for the main content container.\n  - **Card Component**:\n    - `.card`: Styles a generic card component with background, padding, border-radius, and box-shadow.\n  - **Image Table**:\n    - `.image-table`: Styles the table for listing images, including `th` (header) and `td` (data) cells, and hover effects for rows.\n  - **Buttons and Links**:\n    - `.btn`: Styles general buttons with background, color, padding, border-radius, and hover effects.\n    - `.back-link`: Styles a \"Back to Image List\" link with color, text decoration, and font weight.\n  - **Layout and Lists**:\n    - `.grid`: Defines a CSS Grid layout for flexible content arrangement.\n    - `.detail-list`, `.detail-list li`: Styles for unordered lists used in detail views.\n  - **Tags and Severity Indicators**:\n    - `.tag`: Styles small tags (e.g., for image tags).\n    - `.severity-Critical`, `.severity-High`, `.severity-Medium`, `.severity-Low`: Defines specific text colors and font weights for different CVE severity levels.\n- Notable Patterns or Logic:\n  - **Semantic CSS**: Uses class names that describe the purpose or content (e.g., `.card`, `.image-table`, `.severity-Critical`).\n  - **Basic Responsive Design**: Uses `max-width` and `grid` with `auto-fit` to adapt to different screen sizes.\n  - **Theming**: Establishes a consistent color palette and typography.\n  - **Component-Oriented Styling**: Styles are often grouped by the UI component they affect.",
  "frontend/index.html": "- File Path: `frontend/index.html`\n- High-Level Purpose: This is the main HTML file for the frontend application, serving as the entry point and defining the basic structure, metadata, and links to stylesheets and JavaScript.\n- Definitions in the File:\n  - **HTML Structure**:\n    - `\u003c!DOCTYPE html\u003e`: HTML5 document type.\n    - `\u003chtml lang=\"en\"\u003e`: Root element.\n    - `\u003chead\u003e`: Contains metadata and links.\n      - `\u003cmeta charset=\"UTF-8\"\u003e`, `\u003cmeta name=\"viewport\"\u003e`: Character set and responsive viewport.\n      - `\u003ctitle\u003e`: Page title \"Secure Software Supply Chain MVP\".\n      - `\u003clink rel=\"stylesheet\" href=\"css/style.css\"\u003e`: Links to the main CSS stylesheet.\n    - `\u003cbody\u003e`: Contains the visible content.\n      - `\u003cheader\u003e`: Application header with a title link and a `div` for authentication controls (`#auth-controls`).\n      - `\u003cmain id=\"app\"\u003e`: The main content area where dynamic content will be rendered, initially showing \"Loading...\".\n      - `\u003cscript type=\"module\" src=\"js/main.js\"\u003e\u003c/script\u003e`: Imports the main JavaScript module.\n- Notable Patterns or Logic:\n  - **Single-Page Application (SPA) Entry Point**: Designed to load a single HTML page and then dynamically render content using JavaScript.\n  - **Client-Side Rendering**: The `main` element with `id=\"app\"` is the target for JavaScript to inject dynamic HTML content.\n  - **Modular JavaScript**: Uses `type=\"module\"` for `main.js`, indicating modern JavaScript module usage.\n",
  "frontend/js/api.js": "- File Path: `frontend/js/api.js`\n- High-Level Purpose: This file provides a centralized JavaScript client for making API requests to the backend, handling common concerns like base URL, content type, authentication headers, and error responses.\n- Definitions in the File:\n  - **Variables / Constants**:\n    - `BASE_URL` (string): Constant string \"/v1\" defining the base path for API endpoints.\n  - **Functions**:\n    - `fetchJSON(url, options = {})`: Internal async function.\n      - Signature: `async function fetchJSON(url, options = {})`\n      - Description: A wrapper around the browser's `fetch` API. It sets default `Content-Type` to `application/json`, includes an `Authorization` header with a bearer token if available (from `getToken`), handles non-OK HTTP responses by parsing error messages, and returns JSON data or `null` for 204 No Content.\n  - **Variables / Constants**:\n    - `apiClient` (object): Publicly exported object containing methods for specific API calls.\n      - Methods:\n        - `getImages()`: Fetches a list of all images.\n        - `getImage(id)`: Fetches details for a specific image by ID.\n        - `getImageSBOMs(id)`: Fetches SBOMs for a specific image by ID.\n        - `getImageCVEs(id)`: Fetches CVEs for a specific image by ID.\n        - `getImageVerification(id)`: Fetches verification data for a specific image by ID.\n- Notable Patterns or Logic:\n  - **API Client Abstraction**: Provides a clean interface (`apiClient` object) for interacting with different backend endpoints.\n  - **Centralized Error Handling**: All API calls go through `fetchJSON`, which standardizes error reporting.\n  - **Authentication Header Injection**: Automatically adds a `Bearer` token from `auth.js` to outgoing requests if a token is present.\n  - **JSON Handling**: Assumes and handles JSON for both request and response bodies.\n",
  "frontend/js/auth.js": "- File Path: `frontend/js/auth.js`\n- High-Level Purpose: This file provides mock authentication utilities for the frontend application, simulating user login, logout, and token management using browser local storage.\n- Definitions in the File:\n  - **Variables / Constants**:\n    - `TOKEN_KEY` (string): Constant string \"authToken\" used as the key for storing the mock token in local storage.\n  - **Functions**:\n    - `login()`: Publicly exported function.\n      - Signature: `function login()`\n      - Description: Simulates a login by storing a hardcoded mock JWT token in `localStorage`. Logs a message to the console.\n    - `logout()`: Publicly exported function.\n      - Signature: `function logout()`\n      - Description: Removes the mock token from `localStorage`. Logs a message to the console.\n    - `getToken()`: Publicly exported function.\n      - Signature: `function getToken()`\n      - Description: Retrieves the mock token from `localStorage`.\n    - `isAuthenticated()`: Publicly exported function.\n      - Signature: `function isAuthenticated()`\n      - Description: Checks if a token exists in `localStorage`, returning `true` if authenticated, `false` otherwise.\n- Notable Patterns or Logic:\n  - **Mock Authentication**: Provides a simplified, client-side mock for an authentication flow, suitable for development without a real identity provider.\n  - **Local Storage**: Uses `localStorage` to persist the mock authentication token across browser sessions.\n",
  "frontend/js/components/imageDetail.js": "- File Path: `frontend/js/components/imageDetail.js`\n- High-Level Purpose: This file contains functions responsible for rendering the detailed view of a single image, including its metadata, CVE findings, SBOMs, and verification information.\n- Definitions in the File:\n  - **Functions**:\n    - `renderCVEs(cves)`: Internal function.\n      - Signature: `function renderCVEs(cves)`\n      - Description: Generates HTML for a list of CVE findings, displaying CVE ID, severity, and fix availability. Returns a message if no CVEs are found.\n    - `renderSBOMs(sboms)`: Internal function.\n      - Signature: `function renderSBOMs(sboms)`\n      - Description: Generates HTML for a list of SBOM records, showing format and a link to the URI. Returns a message if no SBOMs are found.\n    - `renderVerification(verification)`: Internal function.\n      - Signature: `function renderVerification(verification)`\n      - Description: Generates HTML for image verification details, including signature key ID, Rekor entry link, and a list of attestations with their types and URIs.\n    - `renderImageDetail({ image, sboms, cves, verification })`: Publicly exported function.\n      - Signature: `export function renderImageDetail({ image, sboms, cves, verification })`\n      - Description: The main function that composes and returns the full HTML string for an image's detailed view, combining image metadata with the output of `renderCVEs`, `renderSBOMs`, and `renderVerification`. Includes a \"Back to Image List\" link.\n- Notable Patterns or Logic:\n  - Component-based rendering using JavaScript template literals for HTML generation.\n  - Separates rendering logic for different sections (CVEs, SBOMs, verification) into helper functions for modularity.\n",
  "frontend/js/components/imageTable.js": "- File Path: `frontend/js/components/imageTable.js`\n- High-Level Purpose: This file provides a JavaScript function to render an HTML table displaying a list of images, offering a summary view and links to their detailed pages.\n- Definitions in the File:\n  - **Functions**:\n    - `renderImageTable(images)`: Publicly exported function.\n      - Signature: `export function renderImageTable(images)`\n      - Description: Generates the HTML string for a table that lists images. Each row includes the image ID, tenant, a truncated digest, tags, SLSA level, and a \"View Details\" button that links to the image's specific detail page. If no images are provided, it returns a message indicating that no images were found.\n- Notable Patterns or Logic:\n  - **Component-based rendering**: The function encapsulates the logic for rendering the image list table as a self-contained HTML string.\n  - **Conditional Rendering**: Checks if the `images` array is empty and displays a \"No images found\" message if it is.\n  - **Data Mapping**: Iterates over the `images` array to dynamically generate table rows using JavaScript template literals.\n  - **Client-side Navigation**: Uses hash-based links (`#/images/${image.id}`) for navigation to individual image detail pages.",
  "frontend/js/main.js": "- File Path: `frontend/js/main.js`\n- High-Level Purpose: This is the main JavaScript file for the frontend application, responsible for initializing the application, handling client-side routing, managing authentication UI, and rendering different views based on the URL hash.\n- Definitions in the File:\n  - **Variables / Constants**:\n    - `app` (HTMLElement): Reference to the main content area (`\u003cmain id=\"app\"\u003e`).\n    - `authControls` (HTMLElement): Reference to the authentication controls area (`\u003cdiv id=\"auth-controls\"\u003e`).\n  - **Functions**:\n    - `showLoading()`: Internal function.\n      - Signature: `const showLoading = () =\u003e {}`\n      - Description: Displays a \"Loading...\" message in the main content area.\n    - `showError(message)`: Internal function.\n      - Signature: `const showError = (message) =\u003e {}`\n      - Description: Displays an error message in the main content area, styled in red.\n    - `showLoginView()`: Internal function.\n      - Signature: `const showLoginView = () =\u003e {}`\n      - Description: Displays a \"Please Log In\" message, prompting the user to authenticate.\n    - `showImageListView()`: Internal async function.\n      - Signature: `const showImageListView = async () =\u003e {}`\n      - Description: Fetches all images from the API and renders them using `renderImageTable`. Handles errors, including redirecting to `showLoginView` on 401 Unauthorized.\n    - `showImageDetailView(id)`: Internal async function.\n      - Signature: `const showImageDetailView = async (id) =\u003e {}`\n      - Description: Fetches a specific image, its SBOMs, CVEs, and verification data from the API, then renders the detailed view using `renderImageDetail`.\n    - `router()`: Internal function.\n      - Signature: `const router = () =\u003e {}`\n      - Description: The core client-side router. Checks authentication status, then determines which view to render based on `window.location.hash` (e.g., `/images/{id}` for detail, or default to image list).\n    - `renderAuthUI()`: Internal function.\n      - Signature: `const renderAuthUI = () =\u003e {}`\n      - Description: Renders the appropriate authentication buttons (\"Login\" or \"Logout\") in the header based on the current authentication status and attaches event listeners.\n- Notable Patterns or Logic:\n  - **Client-Side Routing**: Implements a simple hash-based router (`window.location.hash`) to navigate between different views without full page reloads.\n  - **Asynchronous Data Fetching**: Uses `async/await` and `Promise.all` to fetch data from the API.\n  - **Component-Based Rendering**: Integrates with `renderImageTable` and `renderImageDetail` components to display content.\n  - **Event Listeners**: Attaches event listeners to `hashchange` and `DOMContentLoaded` to trigger routing and UI updates.\n  - **Authentication Integration**: Uses `auth.js` functions (`isAuthenticated`, `login`, `logout`) to manage and reflect authentication state in the UI.\n"
}