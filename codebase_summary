{
  ".env.example": "- File Path: `.env.example`\n- High-Level Purpose: This file provides an example template for environment variables used to configure the application, including API server, PostgreSQL database, and MinIO object storage settings.\n- Definitions in the File:\n  - **Variables/Constants**:\n    - `API_PORT`: (string) Default port for the API server (e.g., `8080`).\n    - `POSTGRES_USER`: (string) PostgreSQL database username (e.g., `user`).\n    - `POSTGRES_PASSWORD`: (string) PostgreSQL database password (e.g., `password`).\n    - `POSTGRES_DB`: (string) PostgreSQL database name (e.g., `secure_supply_chain`).\n    - `DATABASE_URL`: (string) Full PostgreSQL connection string (e.g., `postgres://user:password@db:5432/secure_supply_chain?sslmode=disable`).\n    - `MINIO_ENDPOINT`: (string) MinIO server endpoint (e.g., `minio:9000`).\n    - `MINIO_ACCESS_KEY`: (string) MinIO access key (e.g., `minioadmin`).\n    - `MINIO_SECRET_KEY`: (string) MinIO secret key (e.g., `minioadmin`).\n    - `MINIO_USE_SSL`: (boolean) Whether to use SSL for MinIO (e.g., `false`).\n- Notable Patterns or Logic:\n  - Provides clear variable names and example values for local development setup.\n  - Includes placeholders for MinIO, indicating future integration or functionality.\n",
  ".gitignore": "- File Path: `.gitignore`\n- High-Level Purpose: This file specifies intentionally untracked files and directories that Git should ignore, preventing them from being committed to the repository.\n- Definitions in the File:\n  - **Ignored Patterns**:\n    - Binary files: `*.exe`, `*.dll`, `*.so`, `*.dylib`, `*.test`, `*.out`.\n    - Go-specific files: `vendor/` (commented out), `go.work`, `go.work.sum`.\n    - Environment files: `.env`.\n    - Docker-related files: `docker-compose.override.yml`, `docker-compose.local.yml`.\n    - Build output directories: `/build`, `/dist`.\n    - IDE-specific files: `.idea/`, `.vscode/`, `*.swp`, `*~`.\n",
  "Makefile": "- File Path: `Makefile`\n- High-Level Purpose: This Makefile provides a set of convenient commands for managing the Docker Compose-based development environment, including starting, stopping, viewing logs, and resetting the database.\n- Definitions in the File:\n  - **Targets**:\n    - `up`: Builds and starts all services defined in `docker-compose.yml` in detached mode.\n    - `down`: Stops and removes all services, networks, and volumes defined in `docker-compose.yml`.\n    - `logs`: Displays real-time logs for the `backend` service.\n    - `db-reset`: Stops all services, removes volumes (including database data), restarts only the database, waits for it to be ready, then restarts the backend, frontend, and MinIO services.\n- Notable Patterns or Logic:\n  - Uses `docker-compose` commands for service management.\n  - `db-reset` target includes a `sleep` command to allow the database to fully initialize before dependent services start.\n  - `.PHONY` declaration ensures targets are always run as commands, not as file names.\n",
  "backend/Dockerfile": "- File Path: `backend/Dockerfile`\n- High-Level Purpose: This Dockerfile defines the steps to build a Docker image for the Go backend application using a multi-stage build process for efficiency.\n- Definitions in the File:\n  - **Stages**:\n    - `builder`: Uses `golang:1.21-alpine` to download Go modules and build the `secure-image-service` binary.\n    - `final`: Uses `alpine:latest` as a base, copies the compiled binary from the `builder` stage, exposes port 8080, and sets the command to run the application.\n- Notable Patterns or Logic:\n  - **Multi-stage build**: Separates build environment from runtime environment to produce a smaller final image.\n  - **Dependency caching**: Copies `go.mod` and `go.sum` first to leverage Docker layer caching for dependencies.\n  - **Static compilation**: `CGO_ENABLED=0 GOOS=linux go build` ensures a statically linked binary suitable for Alpine.\n",
  "backend/cmd/server/main.go": "- File Path: `backend/cmd/server/main.go`\n- High-Level Purpose: This is the main entry point for the backend Go application. It handles application startup, configuration loading, database connection, dependency injection, HTTP server initialization, and graceful shutdown.\n- Definitions in the File:\n  - **Functions**:\n    - `main()`: Public function.\n      - Signature: `func main()`\n      - Description:\n        - Loads `.env` file for local development.\n        - Initializes a logger.\n        - Loads application configuration.\n        - Sets up a context for graceful shutdown.\n        - Establishes a PostgreSQL database connection pool.\n        - Initializes PostgreSQL repository implementations for images and customers.\n        - Initializes use case implementations for images and customers, injecting repositories.\n        - Initializes the HTTP server, injecting use cases and the logger.\n        - Starts the HTTP server in a goroutine.\n        - Waits for OS interrupt signals (SIGINT, SIGTERM).\n        - Initiates graceful shutdown of the HTTP server.\n- Notable Patterns or Logic:\n  - **Dependency Injection**: All major components (repositories, use cases, handlers) are created and wired together in `main`.\n  - **Graceful Shutdown**: Implements a mechanism to shut down the HTTP server cleanly upon receiving OS signals.\n  - **Configuration Management**: Uses `godotenv` and a custom `config` package to load settings.\n  - **Structured Logging**: Utilizes `zerolog` for logging application events.\n",
  "backend/go.mod": "- File Path: `backend/go.mod`\n- High-Level Purpose: This Go module file defines the module path and manages the direct and indirect dependencies required by the `secure-image-service` backend application.\n- Definitions in the File:\n  - **Module**: `secure-image-service`\n  - **Go Version**: `go 1.21`\n  - **Direct Dependencies**:\n    - `github.com/go-chi/chi/v5 v5.0.12`: HTTP router.\n    - `github.com/jackc/pgx/v5 v5.5.5`: PostgreSQL driver.\n    - `github.com/joho/godotenv v1.5.1`: Loads environment variables from `.env` files.\n    - `github.com/rs/zerolog v1.32.0`: Structured logger.\n  - **Indirect Dependencies**:\n    - Various `jackc` packages for PostgreSQL.\n    - `mattn` packages for console color/tty detection.\n    - `golang.org/x` packages for crypto, sync, sys, text.\n",
  "backend/internal/adapter/handler/http/customer_handler.go": "- File Path: `backend/internal/adapter/handler/http/customer_handler.go`\n- High-Level Purpose: This file defines HTTP handlers for customer-related API endpoints, translating HTTP requests into use case calls and formatting responses.\n- Definitions in the File:\n  - **Structs**:\n    - `CustomerHandler`: Handles HTTP requests related to customers.\n      - Fields: `usecase` (*usecase.CustomerUsecase).\n  - **Functions**:\n    - `NewCustomerHandler(uc *usecase.CustomerUsecase)`: Public function.\n      - Signature: `func NewCustomerHandler(uc *usecase.CustomerUsecase) *CustomerHandler`\n      - Description: Constructor for `CustomerHandler`, injecting a `CustomerUsecase` dependency.\n    - `ListCustomers(w http.ResponseWriter, r *http.Request)`: Public method on `CustomerHandler`.\n      - Signature: `func (h *CustomerHandler) ListCustomers(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles GET requests to list all customers, calls the `CustomerUsecase`, and responds with JSON or an error.\n    - `GetCustomer(w http.ResponseWriter, r *http.Request)`: Public method on `CustomerHandler`.\n      - Signature: `func (h *CustomerHandler) GetCustomer(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles GET requests for a specific customer by namespace (parsed from URL parameter), calls the `CustomerUsecase`, and responds with JSON, a 404 if not found, or an error.\n",
  "backend/internal/adapter/handler/http/image_handler.go": "- File Path: `backend/internal/adapter/handler/http/image_handler.go`\n- High-Level Purpose: This file defines HTTP handlers for image-related API endpoints, translating incoming HTTP requests into calls to the image use case and formatting the responses. It also provides mocked data for SBOMs, CVEs, and verification.\n- Definitions in the File:\n  - **Structs**:\n    - `ImageHandler`: Handles HTTP requests related to images.\n      - Fields: `usecase` (*usecase.ImageUsecase).\n  - **Functions**:\n    - `NewImageHandler(uc *usecase.ImageUsecase)`: Public function.\n      - Signature: `func NewImageHandler(uc *usecase.ImageUsecase) *ImageHandler`\n      - Description: Constructor for `ImageHandler`, injecting a `usecase.ImageUsecase` dependency.\n    - `ListImages(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) ListImages(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles GET requests to retrieve all images, delegates to the `ImageUsecase`, and responds with a JSON array of images or an error.\n    - `GetImage(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) GetImage(w http.ResponseWriter, r *http.Request)`\n      - Description: Handles GET requests for a specific image by ID (parsed from URL parameter), delegates to the `ImageUsecase`, and responds with the image JSON, a 404 if not found, or an error.\n    - `GetImageSBOMs(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) GetImageSBOMs(w http.ResponseWriter, r *http.Request)`\n      - Description: Returns mocked SBOM data for a given image ID. In a real application, this would query a database.\n    - `GetImageCVEs(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) GetImageCVEs(w http.ResponseWriter, r *http.Request)`\n      - Description: Returns mocked CVE data for a given image ID, with different mock data based on the ID for demonstration purposes.\n    - `GetImageVerification(w http.ResponseWriter, r *http.Request)`: Public method on `ImageHandler`.\n      - Signature: `func (h *ImageHandler) GetImageVerification(w http.ResponseWriter, r *http.Request)`\n      - Description: Returns mocked verification data (signature, attestations, Rekor entry) for a given image ID.\n    - `respondWithError(w http.ResponseWriter, code int, message string)`: Internal helper function.\n      - Signature: `func respondWithError(w http.ResponseWriter, code int, message string)`\n      - Description: Writes a JSON error response to the `http.ResponseWriter` with the specified HTTP status code and message.\n    - `respondWithJSON(w http.ResponseWriter, code int, payload interface{})`: Internal helper function.\n      - Signature: `func respondWithJSON(w http.ResponseWriter, code int, payload interface{})`\n      - Description: Writes a JSON response to the `http.ResponseWriter` with the specified HTTP status code and payload.\n- Notable Patterns or Logic:\n  - Uses `github.com/go-chi/chi/v5` for extracting URL parameters (`chi.URLParam`).\n  - Includes helper functions (`respondWithError`, `respondWithJSON`) for consistent JSON API responses.\n  - **Mocked Data**: The `GetImageSBOMs`, `GetImageCVEs`, and `GetImageVerification` methods currently return hardcoded, mocked data, indicating that these features are in development or for demonstration.\n",
  "backend/internal/adapter/handler/http/server.go": "- File Path: `backend/internal/adapter/handler/http/server.go`\n- High-Level Purpose: This file is responsible for initializing and configuring the main HTTP server for the backend application, setting up routing, applying middleware, and injecting necessary handlers.\n- Definitions in the File:\n  - **Structs**:\n    - `Server`: Represents the HTTP server instance.\n      - Fields:\n        - `Router` (*chi.Mux): The `chi` router instance used for defining HTTP routes.\n        - `ImageHandler` (*ImageHandler): An instance of the `ImageHandler` to manage image-related API requests.\n        - `CustomerHandler` (*CustomerHandler): An instance of the `CustomerHandler` to manage customer-related API requests.\n        - `Logger` (zerolog.Logger): A `zerolog` logger instance for server-side logging.\n  - **Functions**:\n    - `NewServer(imageUsecase *usecase.ImageUsecase, customerUsecase *usecase.CustomerUsecase, logger zerolog.Logger)`: Public function.\n      - Signature: `func NewServer(...) *Server`\n      - Description: Constructor for the `Server` struct. It initializes a new `chi.Mux` router, creates `ImageHandler` and `CustomerHandler` instances by injecting their respective use cases, and then calls `setupRoutes` to configure the API endpoints.\n    - `setupRoutes()`: Internal method on `Server`.\n      - Signature: `func (s *Server) setupRoutes()`\n      - Description: Configures global middleware for the router (RequestID, RealIP, Logger, Recoverer, Timeout). It defines a `/health` endpoint and groups API routes under `/v1`, including endpoints for `/v1/images` (list, get by ID, SBOMs, CVEs, verification) and `/v1/customers` (list, get by namespace).\n    - `ServeHTTP(w http.ResponseWriter, r *http.Request)`: Public method on `Server`.\n      - Signature: `func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request)`\n      - Description: Implements the `http.Handler` interface, allowing the `Server` to be used directly with `http.ListenAndServe`. It delegates the request handling to the internal `chi.Mux` router.\n    - `Shutdown(ctx context.Context)`: Public method on `Server`.\n      - Signature: `func (s *Server) Shutdown(ctx context.Context) error`\n      - Description: A placeholder method for graceful server shutdown. It currently logs an informational message.\n- Notable Patterns or Logic:\n  - **HTTP Router**: Uses `github.com/go-chi/chi/v5` for defining and managing HTTP routes.\n  - **Middleware**: Integrates `chi`'s built-in middleware for common concerns like request ID generation, real IP detection, logging, panic recovery, and request timeouts.\n  - **Dependency Injection**: `ImageUsecase`, `CustomerUsecase`, and `zerolog.Logger` are injected into the `NewServer` constructor, promoting loose coupling.\n  - **API Versioning**: All core API endpoints are prefixed with `/v1`.\n",
  "backend/internal/adapter/postgres/customer_repository.go": "- File Path: `backend/internal/adapter/postgres/customer_repository.go`\n- High-Level Purpose: This file provides a PostgreSQL implementation of the `CustomerRepository` interface, handling database interactions for customer data.\n- Definitions in the File:\n  - **Structs**:\n    - `pgCustomerRepository`: PostgreSQL-specific implementation of `CustomerRepository`.\n      - Fields: `db` (*pgxpool.Pool).\n  - **Functions**:\n    - `NewCustomerRepository(db *pgxpool.Pool)`: Public function.\n      - Signature: `func NewCustomerRepository(db *pgxpool.Pool) repository.CustomerRepository`\n      - Description: Constructor for `pgCustomerRepository`, taking a `pgxpool.Pool` for database access.\n    - `FindAll(ctx context.Context)`: Public method on `pgCustomerRepository`.\n      - Signature: `func (r *pgCustomerRepository) FindAll(ctx context.Context) ([]*domain.Customer, error)`\n      - Description: Queries the `customers` table to retrieve all customer records, mapping them to `domain.Customer` structs.\n    - `FindByNamespace(ctx context.Context, namespace string)`: Public method on `pgCustomerRepository`.\n      - Signature: `func (r *pgCustomerRepository) FindByNamespace(ctx context.Context, namespace string) (*domain.Customer, error)`\n      - Description: Queries the `customers` table to retrieve a single customer by their `namespace`. Returns `nil, nil` if no rows are found.\n",
  "backend/internal/adapter/postgres/db.go": "- File Path: `backend/internal/adapter/postgres/db.go`\n- High-Level Purpose: This file provides a utility function to establish and test a connection to a PostgreSQL database using `pgxpool`.\n- Definitions in the File:\n  - **Functions**:\n    - `NewConnection(ctx context.Context, connString string)`: Public function.\n      - Signature: `func NewConnection(ctx context.Context, connString string) (*pgxpool.Pool, error)`\n      - Description: Creates a new PostgreSQL connection pool using the provided connection string. It also pings the database to verify the connection before returning the pool.\n",
  "backend/internal/adapter/postgres/image_repository.go": "- File Path: `backend/internal/adapter/postgres/image_repository.go`\n- High-Level Purpose: This file provides a PostgreSQL implementation of the `ImageRepository` interface, handling database interactions for image data.\n- Definitions in the File:\n  - **Structs**:\n    - `pgImageRepository`: PostgreSQL-specific implementation of `ImageRepository`.\n      - Fields: `db` (*pgxpool.Pool).\n  - **Functions**:\n    - `NewImageRepository(db *pgxpool.Pool)`: Public function.\n      - Signature: `func NewImageRepository(db *pgxpool.Pool) repository.ImageRepository`\n      - Description: Constructor for `pgImageRepository`, taking a `pgxpool.Pool` for database access.\n    - `FindAll(ctx context.Context)`: Public method on `pgImageRepository`.\n      - Signature: `func (r *pgImageRepository) FindAll(ctx context.Context) ([]*domain.Image, error)`\n      - Description: Queries the `images` table to retrieve all image records, ordered by creation date, mapping them to `domain.Image` structs.\n    - `FindByID(ctx context.Context, id int)`: Public method on `pgImageRepository`.\n      - Signature: `func (r *pgImageRepository) FindByID(ctx context.Context, id int) (*domain.Image, error)`\n      - Description: Queries the `images` table to retrieve a single image by its `id`. Returns `nil, nil` if no rows are found.\n",
  "backend/internal/domain/customer.go": "- File Path: `backend/internal/domain/customer.go`\n- High-Level Purpose: This file defines the `Customer` data structure, representing the core domain model for a customer or tenant within the secure image service.\n- Definitions in the File:\n  - **Structs**:\n    - `Customer`: Represents a customer entity.\n      - Fields:\n        - `Namespace` (string): Unique identifier for the customer (e.g., tenant ID).\n        - `Name` (string): Full name of the customer.\n        - `ContactInfo` (string): Contact details for the customer.\n        - `SLATier` (string): Service Level Agreement tier for the customer.\n        - `CreatedAt` (time.Time): Timestamp when the customer record was created.\n        - `UpdatedAt` (time.Time): Timestamp when the customer record was last updated.\n- Notable Patterns or Logic:\n  - Uses `json:\"...\"` tags for JSON serialization/deserialization.\n",
  "backend/internal/domain/image.go": "- File Path: `backend/internal/domain/image.go`\n- High-Level Purpose: This file defines the `Image` data structure, representing the core domain model for an image within the secure image service.\n- Definitions in the File:\n  - **Structs**:\n    - `Image`: Represents an image entity.\n      - Fields:\n        - `ID` (int): Unique identifier for the image.\n        - `TenantNamespace` (string): Namespace of the tenant/customer owning the image.\n        - `Digest` (string): Cryptographic digest of the image content.\n        - `Tags` ([]string): List of tags associated with the image.\n        - `SLSALevel` (int): SLSA (Supply-chain Levels for Software Artifacts) level of the image.\n        - `CreatedAt` (time.Time): Timestamp when the image record was created.\n        - `UpdatedAt` (time.Time): Timestamp when the image record was last updated.\n- Notable Patterns or Logic:\n  - Uses `json:\"...\"` tags for JSON serialization/deserialization.\n",
  "backend/internal/repository/customer.go": "- File Path: `backend/internal/repository/customer.go`\n- High-Level Purpose: This file defines the interface for interacting with customer data storage, abstracting the underlying database implementation.\n- Definitions in the File:\n  - **Interfaces**:\n    - `CustomerRepository`: Defines methods for accessing customer data.\n      - Methods:\n        - `FindAll(ctx context.Context) ([]*domain.Customer, error)`: Retrieves all customers.\n        - `FindByNamespace(ctx context.Context, namespace string) (*domain.Customer, error)`: Retrieves a single customer by their namespace.\n",
  "backend/internal/repository/image.go": "- File Path: `backend/internal/repository/image.go`\n- High-Level Purpose: This file defines the interface for interacting with image data storage, abstracting the underlying database implementation.\n- Definitions in the File:\n  - **Interfaces**:\n    - `ImageRepository`: Defines methods for accessing image data.\n      - Methods:\n        - `FindAll(ctx context.Context) ([]*domain.Image, error)`: Retrieves all images.\n        - `FindByID(ctx context.Context, id int) (*domain.Image, error)`: Retrieves a single image by its ID.\n",
  "backend/internal/usecase/customer_usecase.go": "- File Path: `backend/internal/usecase/customer_usecase.go`\n- High-Level Purpose: This file implements the business logic for customer-related operations, acting as an intermediary between handlers and the customer repository.\n- Definitions in the File:\n  - **Structs**:\n    - `CustomerUsecase`: Encapsulates customer-related business logic.\n      - Fields: `repo` (repository.CustomerRepository).\n  - **Functions**:\n    - `NewCustomerUsecase(repo repository.CustomerRepository)`: Public function.\n      - Signature: `func NewCustomerUsecase(repo repository.CustomerRepository) *CustomerUsecase`\n      - Description: Constructor for `CustomerUsecase`, injecting a `CustomerRepository` dependency.\n    - `ListCustomers(ctx context.Context)`: Public method on `CustomerUsecase`.\n      - Signature: `func (uc *CustomerUsecase) ListCustomers(ctx context.Context) ([]*domain.Customer, error)`\n      - Description: Retrieves a list of all customers by delegating to the underlying repository.\n    - `GetCustomer(ctx context.Context, namespace string)`: Public method on `CustomerUsecase`.\n      - Signature: `func (uc *CustomerUsecase) GetCustomer(ctx context.Context, namespace string) (*domain.Customer, error)`\n      - Description: Retrieves a single customer by namespace by delegating to the underlying repository.\n",
  "backend/internal/usecase/image_usecase.go": "- File Path: `backend/internal/usecase/image_usecase.go`\n- High-Level Purpose: This file implements the business logic for image-related operations, acting as an intermediary between handlers and the image repository.\n- Definitions in the File:\n  - **Structs**:\n    - `ImageUsecase`: Encapsulates image-related business logic.\n      - Fields: `repo` (repository.ImageRepository).\n  - **Functions**:\n    - `NewImageUsecase(repo repository.ImageRepository)`: Public function.\n      - Signature: `func NewImageUsecase(repo repository.ImageRepository) *ImageUsecase`\n      - Description: Constructor for `ImageUsecase`, injecting an `ImageRepository` dependency.\n    - `ListImages(ctx context.Context)`: Public method on `ImageUsecase`.\n      - Signature: `func (uc *ImageUsecase) ListImages(ctx context.Context) ([]*domain.Image, error)`\n      - Description: Retrieves a list of all images by delegating to the underlying repository.\n    - `GetImage(ctx context.Context, id int)`: Public method on `ImageUsecase`.\n      - Signature: `func (uc *ImageUsecase) GetImage(ctx context.Context, id int) (*domain.Image, error)`\n      - Description: Retrieves a single image by its ID by delegating to the underlying repository.\n",
  "backend/pkg/config/config.go": "- File Path: `backend/pkg/config/config.go`\n- High-Level Purpose: This file defines the application's configuration structure and provides a function to load configuration values from environment variables, applying default values where necessary.\n- Definitions in the File:\n  - **Structs**:\n    - `Config`: Represents the application's configuration.\n      - Fields: `DatabaseURL` (string), `APIPort` (string).\n  - **Functions**:\n    - `Load()`: Public function.\n      - Signature: `func Load() (*Config, error)`\n      - Description: Loads configuration settings from environment variables (`API_PORT`, `DATABASE_URL`). It defaults `API_PORT` to \"8080\" if not set or invalid, and returns a pointer to a `Config` struct.\n",
  "backend/pkg/logger/logger.go": "- File Path: `backend/pkg/logger/logger.go`\n- High-Level Purpose: This file provides a utility function to initialize and configure a `zerolog` logger for consistent logging across the application.\n- Definitions in the File:\n  - **Functions**:\n    - `New()`: Public function.\n      - Signature: `func New() zerolog.Logger`\n      - Description: Returns a new `zerolog.Logger` instance configured for console output (stderr), `TraceLevel`, with timestamps.\n",
  "deployments/docker-compose.yml": "- File Path: `deployments/docker-compose.yml`\n- High-Level Purpose: This Docker Compose file defines and configures a multi-service application stack, including a PostgreSQL database, MinIO object storage, the Go backend, and an Nginx frontend.\n- Definitions in the File:\n  - **Services**:\n    - `db`: PostgreSQL database.\n      - Image: `postgres:14-alpine`.\n      - Environment variables for database name, user, and password.\n      - Port mapping: `5432:5432`.\n      - Volumes: `postgres_data` for persistence, `./seed/init.sql` for initialization.\n      - Healthcheck: Ensures the database is ready before dependent services start.\n    - `minio`: MinIO object storage.\n      - Image: `minio/minio:latest`.\n      - Port mapping: `9000:9000` (API), `9001:9001` (console).\n      - Environment variables for root user and password.\n      - Command: `server /data --console-address \":9001\"`.\n      - Volumes: `minio_data` for persistence.\n    - `backend`: Go backend application.\n      - Builds from `../backend/Dockerfile`.\n      - Port mapping: `${API_PORT}:${API_PORT}`.\n      - Depends on `db` being healthy.\n      - Environment variables for `DATABASE_URL` and `API_PORT`.\n      - Loads environment variables from `../.env`.\n    - `frontend`: Nginx web server for the frontend.\n      - Image: `nginx:alpine`.\n      - Port mapping: `80:80`.\n      - Volumes: Mounts `../frontend` directory to serve static files.\n      - Depends on `backend`.\n  - **Volumes**:\n    - `postgres_data`: For PostgreSQL data persistence.\n    - `minio_data`: For MinIO data persistence.\n- Notable Patterns or Logic:\n  - **Multi-service orchestration**: Defines how different parts of the application interact.\n  - **Environment variable usage**: Uses `${VAR_NAME}` syntax to inject values from the host or `.env` file.\n  - **Service healthchecks**: Ensures dependencies are ready before starting services.\n  - **Volume mapping**: Persists data for stateful services.\n",
  "deployments/seed/init.sql": "- File Path: `deployments/seed/init.sql`\n- High-Level Purpose: This SQL script initializes the PostgreSQL database schema by creating necessary tables and populating them with sample data for customers, images, SBOMs, CVEs, and attestations.\n- Definitions in the File:\n  - **Tables**:\n    - `customers`: Stores tenant/customer information.\n      - Columns: `namespace` (PRIMARY KEY, VARCHAR), `name` (VARCHAR), `contact_info` (VARCHAR), `sla_tier` (VARCHAR, default 'standard'), `created_at` (TIMESTAMPTZ), `updated_at` (TIMESTAMPTZ).\n    - `images`: Stores metadata for secure images.\n      - Columns: `id` (SERIAL PRIMARY KEY), `tenant_namespace` (VARCHAR, FOREIGN KEY to `customers`), `digest` (VARCHAR, UNIQUE), `tags` (TEXT[]), `slsa_level` (INT), `created_at` (TIMESTAMPTZ), `updated_at` (TIMESTAMPTZ).\n    - `sbom_records`: Stores SBOM metadata associated with images.\n      - Columns: `id` (SERIAL PRIMARY KEY), `image_id` (INT, FOREIGN KEY to `images`), `format` (VARCHAR), `uri` (VARCHAR), `created_at` (TIMESTAMPTZ).\n    - `cve_findings`: Stores CVE findings associated with images.\n      - Columns: `id` (SERIAL PRIMARY KEY), `image_id` (INT, FOREIGN KEY to `images`), `cve_id` (VARCHAR), `severity` (VARCHAR), `description` (TEXT), `fix_available` (BOOLEAN), `created_at` (TIMESTAMPTZ).\n    - `attestations`: Stores attestation records associated with images.\n      - Columns: `id` (SERIAL PRIMARY KEY), `image_id` (INT, FOREIGN KEY to `images`), `type` (VARCHAR), `uri` (VARCHAR), `created_at` (TIMESTAMPTZ).\n  - **Indexes**:\n    - `idx_images_tenant_namespace` on `images(tenant_namespace)`.\n    - `idx_sbom_records_image_id` on `sbom_records(image_id)`.\n    - `idx_cve_findings_image_id` on `cve_findings(image_id)`.\n    - `idx_attestations_image_id` on `attestations(image_id)`.\n- Notable Patterns or Logic:\n  - Uses `CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";` to enable UUID generation (though not directly used in table definitions here, it's a common extension).\n  - `CREATE TABLE IF NOT EXISTS` statements ensure idempotency.\n  - `TRUNCATE ... RESTART IDENTITY CASCADE` is used to clear and reset tables for fresh seeding.\n  - Includes `INSERT` statements to populate all tables with example data, demonstrating relationships between entities.\n",
  "frontend/css/style.css": "- File Path: `frontend/css/style.css`\n- High-Level Purpose: This file defines the visual styling for the frontend application, covering global typography, layout, and specific component appearances.\n- Definitions in the File:\n  - **CSS Rules**:\n    - `body`: Sets global font family, line height, background color, and text color.\n    - `header`: Styles the application header with a dark background, light text, and padding.\n    - `header h1`, `header h1 a`: Styles the main title and its link within the header.\n    - `main`: Defines the maximum width and horizontal centering for the main content area.\n    - `.card`: Styles generic content blocks with a white background, padding, rounded corners, and a subtle shadow.\n    - `.card h2`: Styles headings within cards, including a bottom border.\n    - `.image-table`, `th`, `td`: Styles the image list table, including borders, padding, and text alignment.\n    - `.image-table th`: Styles table headers with a light gray background and bold text.\n    - `.image-table tbody tr:hover`: Adds a hover effect to table rows.\n    - `.btn`: Styles general action buttons/links with a blue background, white text, and rounded corners.\n    - `.back-link`: Styles navigation links (e.g., \"Back to Image List\") with blue text and an underline on hover.\n    - `.grid`: Implements a CSS Grid layout for responsive arrangement of elements, using `auto-fit` and `minmax` for flexible columns.\n    - `.detail-list`, `li`, `strong`: Styles for detailed lists, including padding and bottom borders for list items.\n    - `.tag`: Styles small informational tags (e.g., image tags) with a light gray background and rounded corners.\n    - `.severity-Critical`, `.severity-High`, `.severity-Medium`, `.severity-Low`: Defines specific text colors and font weights for different CVE severity levels.\n- Notable Patterns or Logic:\n  - **Responsive Design**: Utilizes CSS Grid with `auto-fit` and `minmax` to create a responsive layout for content cards.\n  - **Semantic Class Naming**: Uses descriptive class names (e.g., `card`, `image-table`, `btn`, `tag`, `severity-Critical`) to indicate purpose and styling.\n  - **Theming**: Establishes a consistent visual theme with a defined color palette and typography.\n",
  "frontend/index.html": "- File Path: `frontend/index.html`\n- High-Level Purpose: This is the main HTML file for the frontend application, establishing the basic page structure, linking stylesheets, and including the primary JavaScript module.\n- Definitions in the File:\n  - **HTML Structure**:\n    - `\u003c!DOCTYPE html\u003e`, `\u003chtml\u003e`, `\u003chead\u003e`, `\u003cbody\u003e`: Standard document structure.\n    - `\u003cmeta charset=\"UTF-8\"\u003e`, `\u003cmeta name=\"viewport\" ...\u003e`: Character set and responsive viewport settings.\n    - `\u003ctitle\u003e`: \"Secure Software Supply Chain MVP\".\n    - `\u003clink rel=\"stylesheet\" href=\"css/style.css\"\u003e`: Links the main CSS stylesheet.\n    - `\u003cheader\u003e`: Contains the main title and a link to the home page.\n    - `\u003cmain id=\"app\"\u003e`: The main content area where dynamic content will be rendered, initially showing \"Loading...\".\n    - `\u003cscript type=\"module\" src=\"js/main.js\"\u003e\u003c/script\u003e`: Imports the main JavaScript module.\n",
  "frontend/js/api.js": "- File Path: `frontend/js/api.js`\n- High-Level Purpose: This file provides a JavaScript API client for the frontend to interact with the backend services, abstracting HTTP requests and handling common response patterns.\n- Definitions in the File:\n  - **Constants**:\n    - `BASE_URL` (string): The base path for all API requests, set to `/v1`.\n  - **Functions**:\n    - `fetchJSON(url, options)`: Internal async function.\n      - Signature: `async function fetchJSON(url, options = {})`\n      - Description: A generic utility to perform `fetch` requests, parse JSON responses, and handle HTTP errors by throwing an `Error` with details.\n  - **Variables**:\n    - `apiClient`: Publicly exported object.\n      - Description: An object containing methods for specific API endpoints.\n      - Methods:\n        - `getImages()`: Fetches a list of all images.\n        - `getImage(id)`: Fetches a single image by its ID.\n        - `getImageSBOMs(id)`: Fetches SBOM (Software Bill of Materials) data for a specific image.\n        - `getImageCVEs(id)`: Fetches CVE (Common Vulnerabilities and Exposures) data for a specific image.\n        - `getImageVerification(id)`: Fetches verification and attestation data for a specific image.\n- Notable Patterns or Logic:\n  - Centralized API client for consistent interaction with the backend.\n  - Robust error handling for network requests and API responses.\n",
  "frontend/js/components/imageDetail.js": "- File Path: `frontend/js/components/imageDetail.js`\n- High-Level Purpose: This file contains functions responsible for rendering the detailed view of a single image, including its metadata, CVE findings, SBOMs, and verification information.\n- Definitions in the File:\n  - **Functions**:\n    - `renderCVEs(cves)`: Internal function.\n      - Signature: `function renderCVEs(cves)`\n      - Description: Generates HTML for a list of CVE findings, displaying CVE ID, severity, and fix availability. Returns a message if no CVEs are found.\n    - `renderSBOMs(sboms)`: Internal function.\n      - Signature: `function renderSBOMs(sboms)`\n      - Description: Generates HTML for a list of SBOM records, showing format and a link to the URI. Returns a message if no SBOMs are found.\n    - `renderVerification(verification)`: Internal function.\n      - Signature: `function renderVerification(verification)`\n      - Description: Generates HTML for image verification details, including signature key ID, Rekor entry link, and a list of attestations with their types and URIs.\n    - `renderImageDetail({ image, sboms, cves, verification })`: Publicly exported function.\n      - Signature: `export function renderImageDetail({ image, sboms, cves, verification })`\n      - Description: The main function that composes and returns the full HTML string for an image's detailed view, combining image metadata with the output of `renderCVEs`, `renderSBOMs`, and `renderVerification`. Includes a \"Back to Image List\" link.\n- Notable Patterns or Logic:\n  - Component-based rendering using JavaScript template literals for HTML generation.\n  - Separates rendering logic for different sections (CVEs, SBOMs, verification) into helper functions for modularity.\n",
  "frontend/js/components/imageTable.js": "- File Path: `frontend/js/components/imageTable.js`\n- High-Level Purpose: This file provides a JavaScript function to render an HTML table displaying a list of images, offering a summary view and links to their detailed pages.\n- Definitions in the File:\n  - **Functions**:\n    - `renderImageTable(images)`: Publicly exported function.\n      - Signature: `export function renderImageTable(images)`\n      - Description: Generates the HTML string for a table that lists images. Each row includes the image ID, tenant, a truncated digest, tags, SLSA level, and a \"View Details\" button that links to the image's specific detail page. If no images are provided, it returns a message indicating that no images were found.\n- Notable Patterns or Logic:\n  - **Component-based rendering**: The function encapsulates the logic for rendering the image list table as a self-contained HTML string.\n  - **Conditional Rendering**: Checks if the `images` array is empty and displays a \"No images found\" message if it is.\n  - **Data Mapping**: Iterates over the `images` array to dynamically generate table rows using JavaScript template literals.\n  - **Client-side Navigation**: Uses hash-based links (`#/images/${image.id}`) for navigation to individual image detail pages.",
  "frontend/js/main.js": "- File Path: `frontend/js/main.js`\n- High-Level Purpose: This is the main JavaScript entry point for the frontend application, responsible for client-side routing, fetching data from the backend API, and rendering the appropriate UI components.\n- Definitions in the File:\n  - **Constants**:\n    - `app` (HTMLElement): A reference to the `\u003cmain id=\"app\"\u003e` element in `index.html`, where dynamic content is rendered.\n  - **Functions**:\n    - `showLoading()`: Internal function.\n      - Signature: `const showLoading = () =\u003e {}`\n      - Description: Displays a \"Loading...\" message within the `app` container.\n    - `showError(message)`: Internal function.\n      - Signature: `const showError = (message) =\u003e {}`\n      - Description: Displays an error message in red within the `app` container.\n    - `showImageListView()`: Internal async function.\n      - Signature: `const showImageListView = async () =\u003e {}`\n      - Description: Fetches all images using `apiClient.getImages()` and renders them into the `app` container using `renderImageTable`. Handles loading and error states.\n    - `showImageDetailView(id)`: Internal async function.\n      - Signature: `const showImageDetailView = async (id) =\u003e {}`\n      - Description: Fetches a specific image, its SBOMs, CVEs, and verification data concurrently using `Promise.all` and the `apiClient`. It then renders the detailed view into the `app` container using `renderImageDetail`. Handles loading and error states.\n    - `router()`: Internal function.\n      - Signature: `const router = () =\u003e {}`\n      - Description: Determines the current view based on the URL hash (`window.location.hash`). If the hash matches `#/images/:id`, it calls `showImageDetailView`; otherwise, it calls `showImageListView`.\n- Notable Patterns or Logic:\n  - **Client-side Routing**: Implements a simple hash-based router to navigate between the image list and image detail views without full page reloads.\n  - **Asynchronous Data Fetching**: Uses `async/await` and `Promise.all` for efficient, non-blocking API calls.\n  - **Component Integration**: Imports and utilizes `apiClient`, `renderImageTable`, and `renderImageDetail` to build the user interface.\n  - **Event Listeners**: Attaches the `router` function to `hashchange` and `DOMContentLoaded` events to manage navigation and initial page load.\n"
}