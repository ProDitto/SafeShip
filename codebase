{
  ".env.example": "# API Server Configuration\nAPI_PORT=8080\n\n# PostgreSQL Database Configuration\nPOSTGRES_USER=user\nPOSTGRES_PASSWORD=password\nPOSTGRES_DB=secure_supply_chain\nDATABASE_URL=postgres://user:password@db:5432/secure_supply_chain?sslmode=disable\n\n# MinIO Configuration (placeholders for now)\nMINIO_ENDPOINT=minio:9000\nMINIO_ACCESS_KEY=minioadmin\nMINIO_SECRET_KEY=minioadmin\nMINIO_USE_SSL=false\n",
  ".gitignore": "# Binaries for programs and plugins\n*.exe\n*.exe~\n*.dll\n*.so\n*.dylib\n\n# Test binary, build with `go test -c`\n*.test\n\n# Output of the go coverage tool, specifically when used with LiteIDE\n*.out\n\n# Dependency directories (remove the comment below to include it)\n# vendor/\n\n# Go workspace file\ngo.work\ngo.work.sum\n\n# Environment variables\n.env\n\n# Docker\ndocker-compose.override.yml\ndocker-compose.local.yml\n\n# Build\n/build\n/dist\n\n# IDE\n.idea/\n.vscode/\n*.swp\n*~\n",
  "Makefile": ".PHONY: up down logs db-reset\n\nup:\n\tdocker-compose up -d --build\n\ndown:\n\tdocker-compose down\n\nlogs:\n\tdocker-compose logs -f backend\n\ndb-reset:\n\tdocker-compose down -v\n\tdocker-compose up -d db\n\t@echo \"Waiting for database to be ready...\"\n\t@sleep 5\n\tdocker-compose up -d backend frontend minio\n",
  "backend/Dockerfile": "# Stage 1: Build the application\nFROM golang:1.21-alpine AS builder\n\nWORKDIR /app\n\n# Copy go.mod and go.sum files to download dependencies\nCOPY go.mod go.sum ./\nRUN go mod download\n\n# Copy the rest of the application source code\nCOPY . .\n\n# Build the application\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o secure-image-service ./cmd/server\n\n# Stage 2: Create the final, smaller image\nFROM alpine:latest\n\nWORKDIR /root/\n\n# Copy the binary from the builder stage\nCOPY --from=builder /app/secure-image-service .\n\n# Expose the port the app runs on\nEXPOSE 8080\n\n# Command to run the executable\nCMD [\"./secure-image-service\"]\n",
  "backend/cmd/server/main.go": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"secure-image-service/internal/adapter/handler/http_handler\"\n\t\"secure-image-service/internal/adapter/postgres\"\n\t\"secure-image-service/internal/usecase\"\n\t\"secure-image-service/pkg/config\"\n\t\"secure-image-service/pkg/logger\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/joho/godotenv\"\n)\n\nfunc main() {\n\t// Load .env file for local development\n\t_ = godotenv.Load()\n\n\tlog := logger.New()\n\n\tcfg, err := config.Load()\n\tif err != nil {\n\t\tlog.Fatal().Err(err).Msg(\"Failed to load configuration\")\n\t}\n\n\tctx, cancel := context.WithCancel(context.Background())\n\tdefer cancel()\n\n\t// Setup graceful shutdown\n\tstop := make(chan os.Signal, 1)\n\tsignal.Notify(stop, syscall.SIGINT, syscall.SIGTERM)\n\n\t// Database connection\n\tdbpool, err := postgres.NewConnection(ctx, cfg.DatabaseURL)\n\tif err != nil {\n\t\tlog.Fatal().Err(err).Msg(\"Failed to connect to database\")\n\t}\n\tdefer dbpool.Close()\n\tlog.Info().Msg(\"Database connection established\")\n\n\t// Initialize repositories\n\timageRepo := postgres.NewImageRepository(dbpool)\n\tcustomerRepo := postgres.NewCustomerRepository(dbpool)\n\n\t// Initialize use cases\n\timageUsecase := usecase.NewImageUsecase(imageRepo)\n\tcustomerUsecase := usecase.NewCustomerUsecase(customerRepo)\n\n\t// Initialize HTTP server\n\tserver := http_handler.NewServer(imageUsecase, customerUsecase, log)\n\thttpServer := \u0026http.Server{\n\t\tAddr:    \":\" + cfg.APIPort,\n\t\tHandler: server.Router,\n\t}\n\n\t// Start server in a goroutine\n\tgo func() {\n\t\tlog.Info().Msgf(\"Starting server on port %s\", cfg.APIPort)\n\t\tif err := httpServer.ListenAndServe(); err != nil \u0026\u0026 err != http.ErrServerClosed {\n\t\t\tlog.Fatal().Err(err).Msg(\"Server failed to start\")\n\t\t}\n\t}()\n\n\t// Wait for shutdown signal\n\t\u003c-stop\n\tlog.Info().Msg(\"Shutting down server...\")\n\n\t// Graceful shutdown\n\tshutdownCtx, shutdownCancel := context.WithTimeout(context.Background(), 5*time.Second)\n\tdefer shutdownCancel()\n\n\tif err := httpServer.Shutdown(shutdownCtx); err != nil {\n\t\tlog.Fatal().Err(err).Msg(\"Server shutdown failed\")\n\t}\n\n\tlog.Info().Msg(\"Server gracefully stopped\")\n}\n",
  "backend/go.mod": "module secure-image-service\n\ngo 1.21\n\nrequire (\n\tgithub.com/go-chi/chi/v5 v5.0.12\n\tgithub.com/jackc/pgx/v5 v5.5.5\n\tgithub.com/joho/godotenv v1.5.1\n\tgithub.com/rs/zerolog v1.32.0\n)\n\nrequire (\n\tgithub.com/jackc/pgpassfile v1.0.0 // indirect\n\tgithub.com/jackc/pgservicefile v0.0.0-20221227161230-091c0ba34f0a // indirect\n\tgithub.com/jackc/puddle/v2 v2.2.1 // indirect\n\tgithub.com/mattn/go-colorable v0.1.13 // indirect\n\tgithub.com/mattn/go-isatty v0.0.19 // indirect\n\tgolang.org/x/crypto v0.17.0 // indirect\n\tgolang.org/x/sync v0.1.0 // indirect\n\tgolang.org/x/sys v0.15.0 // indirect\n\tgolang.org/x/text v0.14.0 // indirect\n)\n",
  "backend/internal/adapter/handler/http/customer_handler.go": "package http\n\nimport (\n\t\"net/http\"\n\t\"secure-image-service/internal/usecase\"\n\n\t\"github.com/go-chi/chi/v5\"\n)\n\ntype CustomerHandler struct {\n\tusecase *usecase.CustomerUsecase\n}\n\nfunc NewCustomerHandler(uc *usecase.CustomerUsecase) *CustomerHandler {\n\treturn \u0026CustomerHandler{usecase: uc}\n}\n\nfunc (h *CustomerHandler) ListCustomers(w http.ResponseWriter, r *http.Request) {\n\tcustomers, err := h.usecase.ListCustomers(r.Context())\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Failed to retrieve customers\")\n\t\treturn\n\t}\n\trespondWithJSON(w, http.StatusOK, customers)\n}\n\nfunc (h *CustomerHandler) GetCustomer(w http.ResponseWriter, r *http.Request) {\n\tnamespace := chi.URLParam(r, \"namespace\")\n\tcustomer, err := h.usecase.GetCustomer(r.Context(), namespace)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Failed to retrieve customer\")\n\t\treturn\n\t}\n\tif customer == nil {\n\t\trespondWithError(w, http.StatusNotFound, \"Customer not found\")\n\t\treturn\n\t}\n\trespondWithJSON(w, http.StatusOK, customer)\n}\n",
  "backend/internal/adapter/handler/http/image_handler.go": "package http\n\nimport (\n\t\"encoding/json\"\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"github.com/go-chi/chi/v5\"\n\t\"secure-image-service/internal/usecase\"\n)\n\ntype ImageHandler struct {\n\tusecase *usecase.ImageUsecase\n}\n\nfunc NewImageHandler(uc *usecase.ImageUsecase) *ImageHandler {\n\treturn \u0026ImageHandler{usecase: uc}\n}\n\nfunc (h *ImageHandler) ListImages(w http.ResponseWriter, r *http.Request) {\n\timages, err := h.usecase.ListImages(r.Context())\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Failed to retrieve images\")\n\t\treturn\n\t}\n\trespondWithJSON(w, http.StatusOK, images)\n}\n\nfunc (h *ImageHandler) GetImage(w http.ResponseWriter, r *http.Request) {\n\tidStr := chi.URLParam(r, \"id\")\n\tid, err := strconv.Atoi(idStr)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusBadRequest, \"Invalid image ID\")\n\t\treturn\n\t}\n\n\timage, err := h.usecase.GetImage(r.Context(), id)\n\tif err != nil {\n\t\trespondWithError(w, http.StatusInternalServerError, \"Failed to retrieve image\")\n\t\treturn\n\t}\n\tif image == nil {\n\t\trespondWithError(w, http.StatusNotFound, \"Image not found\")\n\t\treturn\n\t}\n\n\trespondWithJSON(w, http.StatusOK, image)\n}\n\n// GetImageSBOMs returns mocked SBOM data for a given image ID.\nfunc (h *ImageHandler) GetImageSBOMs(w http.ResponseWriter, r *http.Request) {\n\tidStr := chi.URLParam(r, \"id\")\n\t// In a real app, you'd query the database based on the ID.\n\t// Here, we return mock data for the demo.\n\tsboms := []map[string]string{\n\t\t{\"format\": \"SPDX\", \"uri\": \"minio://sboms/image-\" + idStr + \".spdx.json\"},\n\t\t{\"format\": \"CycloneDX\", \"uri\": \"minio://sboms/image-\" + idStr + \".cdx.json\"},\n\t}\n\trespondWithJSON(w, http.StatusOK, sboms)\n}\n\n// GetImageCVEs returns mocked CVE data for a given image ID.\nfunc (h *ImageHandler) GetImageCVEs(w http.ResponseWriter, r *http.Request) {\n\tidStr := chi.URLParam(r, \"id\")\n\t// Mock data varies by ID for a better demo\n\tvar cves []map[string]interface{}\n\tif idStr == \"1\" {\n\t\tcves = []map[string]interface{}{\n\t\t\t{\"cve_id\": \"CVE-2023-4567\", \"severity\": \"Critical\", \"fix_available\": true},\n\t\t\t{\"cve_id\": \"CVE-2023-8910\", \"severity\": \"Medium\", \"fix_available\": false},\n\t\t}\n\t} else if idStr == \"3\" {\n\t\tcves = []map[string]interface{}{\n\t\t\t{\"cve_id\": \"CVE-2024-0001\", \"severity\": \"High\", \"fix_available\": true},\n\t\t}\n\t} else {\n\t\tcves = []map[string]interface{}{} // No CVEs for other images\n\t}\n\trespondWithJSON(w, http.StatusOK, cves)\n}\n\n// GetImageVerification returns mocked verification data for a given image ID.\nfunc (h *ImageHandler) GetImageVerification(w http.ResponseWriter, r *http.Request) {\n\tidStr := chi.URLParam(r, \"id\")\n\tverificationData := map[string]interface{}{\n\t\t\"signature\": map[string]string{\n\t\t\t\"keyId\":     \"gcpkms://projects/secure-project/locations/global/keyRings/cosign/cryptoKeys/prod-key\",\n\t\t\t\"signature\": \"MEUCIQ...\",\n\t\t},\n\t\t\"attestations\": []map[string]string{\n\t\t\t{\"type\": \"provenance\", \"uri\": \"minio://attestations/image-\" + idStr + \"-provenance.json\"},\n\t\t\t{\"type\": \"slsa-v1.0\", \"uri\": \"minio://attestations/image-\" + idStr + \"-slsa.json\"},\n\t\t},\n\t\t\"rekorEntry\": \"https://rekor.sigstore.dev/api/v1/log/entries/e2a5...cfa1\",\n\t}\n\trespondWithJSON(w, http.StatusOK, verificationData)\n}\n\n// Helpers from server.go, duplicated here for brevity in this context.\n// In a real app, these would be in a shared package.\nfunc respondWithError(w http.ResponseWriter, code int, message string) {\n\trespondWithJSON(w, code, map[string]string{\"error\": message})\n}\n\nfunc respondWithJSON(w http.ResponseWriter, code int, payload interface{}) {\n\tresponse, _ := json.Marshal(payload)\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.WriteHeader(code)\n\tw.Write(response)\n}",
  "backend/internal/adapter/handler/http/server.go": "package http\n\nimport (\n\t\"context\"\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/go-chi/chi/v5\"\n\t\"github.com/go-chi/chi/v5/middleware\"\n\t\"github.com/rs/zerolog\"\n\t\"secure-image-service/internal/usecase\"\n)\n\ntype Server struct {\n\tRouter          *chi.Mux\n\tImageHandler    *ImageHandler\n\tCustomerHandler *CustomerHandler\n\tLogger          zerolog.Logger\n}\n\nfunc NewServer(imageUsecase *usecase.ImageUsecase, customerUsecase *usecase.CustomerUsecase, logger zerolog.Logger) *Server {\n\ts := \u0026Server{\n\t\tRouter:          chi.NewRouter(),\n\t\tImageHandler:    NewImageHandler(imageUsecase),\n\t\tCustomerHandler: NewCustomerHandler(customerUsecase),\n\t\tLogger:          logger,\n\t}\n\ts.setupRoutes()\n\treturn s\n}\n\nfunc (s *Server) setupRoutes() {\n\ts.Router.Use(middleware.RequestID)\n\ts.Router.Use(middleware.RealIP)\n\ts.Router.Use(middleware.Logger)\n\ts.Router.Use(middleware.Recoverer)\n\ts.Router.Use(middleware.Timeout(60 * time.Second))\n\n\ts.Router.Get(\"/health\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"OK\"))\n\t})\n\n\ts.Router.Route(\"/v1\", func(r chi.Router) {\n\t\tr.Route(\"/images\", func(r chi.Router) {\n\t\t\tr.Get(\"/\", s.ImageHandler.ListImages)\n\t\t\tr.Get(\"/{id}\", s.ImageHandler.GetImage)\n\t\t\tr.Get(\"/{id}/sbom\", s.ImageHandler.GetImageSBOMs)\n\t\t\tr.Get(\"/{id}/cves\", s.ImageHandler.GetImageCVEs)\n\t\t\tr.Get(\"/{id}/verify\", s.ImageHandler.GetImageVerification)\n\t\t})\n\t\tr.Route(\"/customers\", func(r chi.Router) {\n\t\t\tr.Get(\"/\", s.CustomerHandler.ListCustomers)\n\t\t\tr.Get(\"/{namespace}\", s.CustomerHandler.GetCustomer)\n\t\t})\n\t})\n}\n\nfunc (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\ts.Router.ServeHTTP(w, r)\n}\n\nfunc (s *Server) Shutdown(ctx context.Context) error {\n\t// In a real app, you'd have a http.Server instance to call Shutdown on.\n\t// For this structure, we don't have one to manage, but this is where it would go.\n\ts.Logger.Info().Msg(\"HTTP server shutting down\")\n\treturn nil\n}",
  "backend/internal/adapter/postgres/customer_repository.go": "package postgres\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"secure-image-service/internal/domain\"\n\t\"secure-image-service/internal/repository\"\n\n\t\"github.com/jackc/pgx/v5\"\n\t\"github.com/jackc/pgx/v5/pgxpool\"\n)\n\ntype pgCustomerRepository struct {\n\tdb *pgxpool.Pool\n}\n\nfunc NewCustomerRepository(db *pgxpool.Pool) repository.CustomerRepository {\n\treturn \u0026pgCustomerRepository{db: db}\n}\n\nfunc (r *pgCustomerRepository) FindAll(ctx context.Context) ([]*domain.Customer, error) {\n\trows, err := r.db.Query(ctx, \"SELECT namespace, name, contact_info, sla_tier, created_at, updated_at FROM customers ORDER BY name\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\n\tcustomers, err := pgx.CollectRows(rows, pgx.RowToAddrOfStructByPos[domain.Customer])\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn customers, nil\n}\n\nfunc (r *pgCustomerRepository) FindByNamespace(ctx context.Context, namespace string) (*domain.Customer, error) {\n\trow := r.db.QueryRow(ctx, \"SELECT namespace, name, contact_info, sla_tier, created_at, updated_at FROM customers WHERE namespace = $1\", namespace)\n\n\tcustomer, err := pgx.RowToAddrOfStructByPos[domain.Customer](row)\n\tif err != nil {\n\t\tif errors.Is(err, pgx.ErrNoRows) {\n\t\t\treturn nil, nil // Not found is not an error\n\t\t}\n\t\treturn nil, err\n\t}\n\n\treturn customer, nil\n}\n",
  "backend/internal/adapter/postgres/db.go": "package postgres\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/jackc/pgx/v5/pgxpool\"\n)\n\nfunc NewConnection(ctx context.Context, connString string) (*pgxpool.Pool, error) {\n\tpool, err := pgxpool.New(ctx, connString)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to create connection pool: %w\", err)\n\t}\n\n\tif err := pool.Ping(ctx); err != nil {\n\t\tpool.Close()\n\t\treturn nil, fmt.Errorf(\"unable to ping database: %w\", err)\n\t}\n\n\treturn pool, nil\n}\n",
  "backend/internal/adapter/postgres/image_repository.go": "package postgres\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"secure-image-service/internal/domain\"\n\t\"secure-image-service/internal/repository\"\n\n\t\"github.com/jackc/pgx/v5\"\n\t\"github.com/jackc/pgx/v5/pgxpool\"\n)\n\ntype pgImageRepository struct {\n\tdb *pgxpool.Pool\n}\n\nfunc NewImageRepository(db *pgxpool.Pool) repository.ImageRepository {\n\treturn \u0026pgImageRepository{db: db}\n}\n\nfunc (r *pgImageRepository) FindAll(ctx context.Context) ([]*domain.Image, error) {\n\trows, err := r.db.Query(ctx, \"SELECT id, tenant_namespace, digest, tags, slsa_level, created_at, updated_at FROM images ORDER BY created_at DESC\")\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer rows.Close()\n\n\timages, err := pgx.CollectRows(rows, pgx.RowToAddrOfStructByPos[domain.Image])\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn images, nil\n}\n\nfunc (r *pgImageRepository) FindByID(ctx context.Context, id int) (*domain.Image, error) {\n\trow := r.db.QueryRow(ctx, \"SELECT id, tenant_namespace, digest, tags, slsa_level, created_at, updated_at FROM images WHERE id = $1\", id)\n\n\timage, err := pgx.RowToAddrOfStructByPos[domain.Image](row)\n\tif err != nil {\n\t\tif errors.Is(err, pgx.ErrNoRows) {\n\t\t\treturn nil, nil // Not found is not an error\n\t\t}\n\t\treturn nil, err\n\t}\n\n\treturn image, nil\n}\n",
  "backend/internal/domain/customer.go": "package domain\n\nimport \"time\"\n\ntype Customer struct {\n\tNamespace    string    `json:\"namespace\"`\n\tName         string    `json:\"name\"`\n\tContactInfo  string    `json:\"contact_info\"`\n\tSLATier      string    `json:\"sla_tier\"`\n\tCreatedAt    time.Time `json:\"created_at\"`\n\tUpdatedAt    time.Time `json:\"updated_at\"`\n}\n",
  "backend/internal/domain/image.go": "package domain\n\nimport (\n\t\"time\"\n)\n\ntype Image struct {\n\tID              int       `json:\"id\"`\n\tTenantNamespace string    `json:\"tenant_namespace\"`\n\tDigest          string    `json:\"digest\"`\n\tTags            []string  `json:\"tags\"`\n\tSLSALevel       int       `json:\"slsa_level\"`\n\tCreatedAt       time.Time `json:\"created_at\"`\n\tUpdatedAt       time.Time `json:\"updated_at\"`\n}\n",
  "backend/internal/repository/customer.go": "package repository\n\nimport (\n\t\"context\"\n\t\"secure-image-service/internal/domain\"\n)\n\ntype CustomerRepository interface {\n\tFindAll(ctx context.Context) ([]*domain.Customer, error)\n\tFindByNamespace(ctx context.Context, namespace string) (*domain.Customer, error)\n}\n",
  "backend/internal/repository/image.go": "package repository\n\nimport (\n\t\"context\"\n\t\"secure-image-service/internal/domain\"\n)\n\ntype ImageRepository interface {\n\tFindAll(ctx context.Context) ([]*domain.Image, error)\n\tFindByID(ctx context.Context, id int) (*domain.Image, error)\n}\n",
  "backend/internal/usecase/customer_usecase.go": "package usecase\n\nimport (\n\t\"context\"\n\t\"secure-image-service/internal/domain\"\n\t\"secure-image-service/internal/repository\"\n)\n\ntype CustomerUsecase struct {\n\trepo repository.CustomerRepository\n}\n\nfunc NewCustomerUsecase(repo repository.CustomerRepository) *CustomerUsecase {\n\treturn \u0026CustomerUsecase{repo: repo}\n}\n\nfunc (uc *CustomerUsecase) ListCustomers(ctx context.Context) ([]*domain.Customer, error) {\n\treturn uc.repo.FindAll(ctx)\n}\n\nfunc (uc *CustomerUsecase) GetCustomer(ctx context.Context, namespace string) (*domain.Customer, error) {\n\treturn uc.repo.FindByNamespace(ctx, namespace)\n}\n",
  "backend/internal/usecase/image_usecase.go": "package usecase\n\nimport (\n\t\"context\"\n\t\"secure-image-service/internal/domain\"\n\t\"secure-image-service/internal/repository\"\n)\n\ntype ImageUsecase struct {\n\trepo repository.ImageRepository\n}\n\nfunc NewImageUsecase(repo repository.ImageRepository) *ImageUsecase {\n\treturn \u0026ImageUsecase{repo: repo}\n}\n\nfunc (uc *ImageUsecase) ListImages(ctx context.Context) ([]*domain.Image, error) {\n\treturn uc.repo.FindAll(ctx)\n}\n\nfunc (uc *ImageUsecase) GetImage(ctx context.Context, id int) (*domain.Image, error) {\n\treturn uc.repo.FindByID(ctx, id)\n}\n",
  "backend/pkg/config/config.go": "package config\n\nimport (\n\t\"os\"\n\t\"strconv\"\n)\n\ntype Config struct {\n\tDatabaseURL string\n\tAPIPort     string\n}\n\nfunc Load() (*Config, error) {\n\tport := os.Getenv(\"API_PORT\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\n\t// Validate port is a number\n\tif _, err := strconv.Atoi(port); err != nil {\n\t\tport = \"8080\"\n\t}\n\n\treturn \u0026Config{\n\t\tDatabaseURL: os.Getenv(\"DATABASE_URL\"),\n\t\tAPIPort:     port,\n\t}, nil\n}\n",
  "backend/pkg/logger/logger.go": "package logger\n\nimport (\n\t\"os\"\n\t\"time\"\n\n\t\"github.com/rs/zerolog\"\n)\n\nfunc New() zerolog.Logger {\n\treturn zerolog.New(zerolog.ConsoleWriter{Out: os.Stderr, TimeFormat: time.RFC3339}).\n\t\tLevel(zerolog.TraceLevel).\n\t\tWith().\n\t\tTimestamp().\n\t\tLogger()\n}\n",
  "deployments/docker-compose.yml": "version: '3.8'\n\nservices:\n  db:\n    image: postgres:14-alpine\n    container_name: ssc-db\n    environment:\n      POSTGRES_DB: ${POSTGRES_DB}\n      POSTGRES_USER: ${POSTGRES_USER}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./seed/init.sql:/docker-entrypoint-initdb.d/init.sql\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}\"]\n      interval: 5s\n      timeout: 5s\n      retries: 5\n\n  minio:\n    image: minio/minio:latest\n    container_name: ssc-minio\n    ports:\n      - \"9000:9000\"\n      - \"9001:9001\"\n    environment:\n      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}\n      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}\n    command: server /data --console-address \":9001\"\n    volumes:\n      - minio_data:/data\n\n  backend:\n    build:\n      context: ../backend\n      dockerfile: Dockerfile\n    container_name: ssc-backend\n    ports:\n      - \"${API_PORT}:${API_PORT}\"\n    depends_on:\n      db:\n        condition: service_healthy\n    environment:\n      - DATABASE_URL=${DATABASE_URL}\n      - API_PORT=${API_PORT}\n    env_file:\n      - ../.env\n\n  frontend:\n    image: nginx:alpine\n    container_name: ssc-frontend\n    ports:\n      - \"80:80\"\n    volumes:\n      - ../frontend:/usr/share/nginx/html\n    depends_on:\n      - backend\n\nvolumes:\n  postgres_data:\n  minio_data:\n",
  "deployments/seed/init.sql": "-- Enable extensions\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n-- Create customers table to represent tenants\nCREATE TABLE IF NOT EXISTS customers (\n    namespace VARCHAR(255) PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    contact_info VARCHAR(255),\n    sla_tier VARCHAR(50) NOT NULL DEFAULT 'standard',\n    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n);\n\n-- Create images table\nCREATE TABLE IF NOT EXISTS images (\n    id SERIAL PRIMARY KEY,\n    tenant_namespace VARCHAR(255) NOT NULL REFERENCES customers(namespace) ON DELETE CASCADE,\n    digest VARCHAR(255) UNIQUE NOT NULL,\n    tags TEXT[],\n    slsa_level INT,\n    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n);\nCREATE INDEX IF NOT EXISTS idx_images_tenant_namespace ON images(tenant_namespace);\n\n-- Table for SBOM records\nCREATE TABLE IF NOT EXISTS sbom_records (\n    id SERIAL PRIMARY KEY,\n    image_id INT REFERENCES images(id) ON DELETE CASCADE,\n    format VARCHAR(50) NOT NULL, -- e.g., 'SPDX', 'CycloneDX'\n    uri VARCHAR(255) NOT NULL,\n    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n);\nCREATE INDEX IF NOT EXISTS idx_sbom_records_image_id ON sbom_records(image_id);\n\n-- Table for CVE findings\nCREATE TABLE IF NOT EXISTS cve_findings (\n    id SERIAL PRIMARY KEY,\n    image_id INT REFERENCES images(id) ON DELETE CASCADE,\n    cve_id VARCHAR(50) NOT NULL,\n    severity VARCHAR(50) NOT NULL, -- e.g., 'Critical', 'High', 'Medium', 'Low'\n    description TEXT,\n    fix_available BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n);\nCREATE INDEX IF NOT EXISTS idx_cve_findings_image_id ON cve_findings(image_id);\n\n-- Table for attestations\nCREATE TABLE IF NOT EXISTS attestations (\n    id SERIAL PRIMARY KEY,\n    image_id INT REFERENCES images(id) ON DELETE CASCADE,\n    type VARCHAR(100) NOT NULL, -- e.g., 'provenance', 'slsa'\n    uri VARCHAR(255) NOT NULL,\n    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()\n);\nCREATE INDEX IF NOT EXISTS idx_attestations_image_id ON attestations(image_id);\n\n\n-- Seed data\nTRUNCATE customers, images, sbom_records, cve_findings, attestations RESTART IDENTITY CASCADE;\n\nINSERT INTO customers (namespace, name, contact_info, sla_tier) VALUES\n('acme-corp', 'ACME Corporation', 'security@acme.corp', 'enterprise'),\n('startup-inc', 'Startup Inc.', 'devops@startup.inc', 'standard');\n\nINSERT INTO images (tenant_namespace, digest, tags, slsa_level) VALUES\n('acme-corp', 'sha256:c3d3e4f5a6b7c8d9e0f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3', '{\"latest\", \"1.2.3\"}', 3),\n('acme-corp', 'sha256:abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890', '{\"1.2.2\"}', 3),\n('startup-inc', 'sha256:fedcba0987654321fedcba0987654321fedcba0987654321fedcba0987654321', '{\"latest\"}', 2),\n('startup-inc', 'sha256:11223344556677889900aabbccddeeff11223344556677889900aabbccddeeff', '{\"stable\"}', 2);\n\n-- Seed SBOMs for image 1\nINSERT INTO sbom_records (image_id, format, uri) VALUES\n(1, 'SPDX', 'minio://sboms/acme-corp/image-1.spdx.json'),\n(1, 'CycloneDX', 'minio://sboms/acme-corp/image-1.cdx.json');\n\n-- Seed CVEs for image 1\nINSERT INTO cve_findings (image_id, cve_id, severity, description, fix_available) VALUES\n(1, 'CVE-2023-4567', 'Critical', 'Remote code execution vulnerability in lib-xyz.', true),\n(1, 'CVE-2023-8910', 'Medium', 'Denial of service in logging component.', false);\n\n-- Seed Attestations for image 1\nINSERT INTO attestations (image_id, type, uri) VALUES\n(1, 'provenance', 'minio://attestations/acme-corp/image-1-provenance.json'),\n(1, 'slsa-v1.0', 'minio://attestations/acme-corp/image-1-slsa.json');\n\n-- Seed SBOMs for image 2\nINSERT INTO sbom_records (image_id, format, uri) VALUES\n(2, 'SPDX', 'minio://sboms/acme-corp/image-2.spdx.json');\n\n-- Seed CVEs for image 3\nINSERT INTO cve_findings (image_id, cve_id, severity, description, fix_available) VALUES\n(3, 'CVE-2024-0001', 'High', 'SQL injection vulnerability in base image.', true);\n\n-- Seed Attestations for image 3\nINSERT INTO attestations (image_id, type, uri) VALUES\n(3, 'provenance', 'minio://attestations/startup-inc/image-3-provenance.json');",
  "frontend/css/style.css": "body {\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n    line-height: 1.6;\n    background-color: #f4f7f9;\n    color: #333;\n    margin: 0;\n    padding: 0;\n}\n\nheader {\n    background-color: #2c3e50;\n    color: #ecf0f1;\n    padding: 1rem 2rem;\n    margin-bottom: 2rem;\n}\n\nheader h1 {\n    margin: 0;\n    font-size: 1.5rem;\n}\n\nheader h1 a {\n    color: #ecf0f1;\n    text-decoration: none;\n}\n\nmain {\n    max-width: 1200px;\n    margin: 0 auto;\n    padding: 0 2rem;\n}\n\n.card {\n    background: #fff;\n    padding: 1.5rem;\n    border-radius: 8px;\n    box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n    margin-bottom: 1rem;\n}\n\n.card h2 {\n    margin-top: 0;\n    color: #34495e;\n    border-bottom: 2px solid #e0e0e0;\n    padding-bottom: 0.5rem;\n}\n\n.image-table {\n    width: 100%;\n    border-collapse: collapse;\n}\n\n.image-table th, .image-table td {\n    padding: 0.75rem;\n    text-align: left;\n    border-bottom: 1px solid #ddd;\n}\n\n.image-table th {\n    background-color: #f2f2f2;\n    font-weight: 600;\n}\n\n.image-table tbody tr:hover {\n    background-color: #f9f9f9;\n}\n\n.btn {\n    display: inline-block;\n    padding: 0.5rem 1rem;\n    background-color: #3498db;\n    color: #fff;\n    text-decoration: none;\n    border-radius: 4px;\n    border: none;\n    cursor: pointer;\n    font-size: 0.9rem;\n}\n\n.btn:hover {\n    background-color: #2980b9;\n}\n\n.back-link {\n    display: inline-block;\n    margin-bottom: 1.5rem;\n    color: #3498db;\n    text-decoration: none;\n    font-weight: 600;\n}\n\n.back-link:hover {\n    text-decoration: underline;\n}\n\n.grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 1.5rem;\n}\n\n.detail-list {\n    list-style: none;\n    padding: 0;\n}\n\n.detail-list li {\n    padding: 0.5rem 0;\n    border-bottom: 1px solid #eee;\n}\n\n.detail-list li:last-child {\n    border-bottom: none;\n}\n\n.detail-list strong {\n    display: inline-block;\n    width: 120px;\n    color: #555;\n}\n\n.tag {\n    display: inline-block;\n    background-color: #e0e0e0;\n    color: #555;\n    padding: 0.2rem 0.6rem;\n    border-radius: 12px;\n    font-size: 0.8rem;\n    margin-right: 0.3rem;\n}\n\n.severity-Critical { color: #c0392b; font-weight: bold; }\n.severity-High { color: #e67e22; font-weight: bold; }\n.severity-Medium { color: #f1c40f; }\n.severity-Low { color: #2ecc71; }",
  "frontend/index.html": "\u003c!DOCTYPE html\u003e\n\u003chtml lang=\"en\"\u003e\n\u003chead\u003e\n    \u003cmeta charset=\"UTF-8\"\u003e\n    \u003cmeta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"\u003e\n    \u003ctitle\u003eSecure Software Supply Chain MVP\u003c/title\u003e\n    \u003clink rel=\"stylesheet\" href=\"css/style.css\"\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n    \u003cheader\u003e\n        \u003ch1\u003e\u003ca href=\"#\"\u003eSecure Software Supply Chain MVP\u003c/a\u003e\u003c/h1\u003e\n    \u003c/header\u003e\n    \u003cmain id=\"app\"\u003e\n        \u003cp\u003eLoading...\u003c/p\u003e\n    \u003c/main\u003e\n    \u003cscript type=\"module\" src=\"js/main.js\"\u003e\u003c/script\u003e\n\u003c/body\u003e\n\u003c/html\u003e",
  "frontend/js/api.js": "const BASE_URL = '/v1';\n\nasync function fetchJSON(url, options = {}) {\n    try {\n        const response = await fetch(url, options);\n        if (!response.ok) {\n            const errorData = await response.json().catch(() =\u003e ({ message: response.statusText }));\n            throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('API call failed:', error);\n        throw error;\n    }\n}\n\nexport const apiClient = {\n    getImages: () =\u003e fetchJSON(`${BASE_URL}/images`),\n    getImage: (id) =\u003e fetchJSON(`${BASE_URL}/images/${id}`),\n    getImageSBOMs: (id) =\u003e fetchJSON(`${BASE_URL}/images/${id}/sbom`),\n    getImageCVEs: (id) =\u003e fetchJSON(`${BASE_URL}/images/${id}/cves`),\n    getImageVerification: (id) =\u003e fetchJSON(`${BASE_URL}/images/${id}/verify`),\n};\n",
  "frontend/js/components/imageDetail.js": "function renderCVEs(cves) {\n    if (!cves || cves.length === 0) {\n        return '\u003cp\u003eNo CVEs found for this image.\u003c/p\u003e';\n    }\n    return `\n        \u003cul class=\"detail-list\"\u003e\n            ${cves.map(cve =\u003e `\n                \u003cli\u003e\n                    \u003cstrong class=\"severity-${cve.severity}\"\u003e${cve.cve_id}\u003c/strong\u003e\n                    \u003cspan\u003e(${cve.severity}) - ${cve.fix_available ? 'Fix Available' : 'No Fix'}\u003c/span\u003e\n                \u003c/li\u003e\n            `).join('')}\n        \u003c/ul\u003e\n    `;\n}\n\nfunction renderSBOMs(sboms) {\n    if (!sboms || sboms.length === 0) {\n        return '\u003cp\u003eNo SBOMs found.\u003c/p\u003e';\n    }\n    return `\n        \u003cul class=\"detail-list\"\u003e\n            ${sboms.map(sbom =\u003e `\n                \u003cli\u003e\n                    \u003cstrong\u003e${sbom.format}\u003c/strong\u003e\n                    \u003ca href=\"${sbom.uri}\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e${sbom.uri}\u003c/a\u003e\n                \u003c/li\u003e\n            `).join('')}\n        \u003c/ul\u003e\n    `;\n}\n\nfunction renderVerification(verification) {\n    return `\n        \u003cul class=\"detail-list\"\u003e\n            \u003cli\u003e\u003cstrong\u003eSignature Key ID\u003c/strong\u003e \u003ccode\u003e${verification.signature.keyId}\u003c/code\u003e\u003c/li\u003e\n            \u003cli\u003e\u003cstrong\u003eRekor Entry\u003c/strong\u003e \u003ca href=\"${verification.rekorEntry}\" target=\"_blank\" rel=\"noopener noreferrer\"\u003eView Entry\u003c/a\u003e\u003c/li\u003e\n        \u003c/ul\u003e\n        \u003ch4\u003eAttestations\u003c/h4\u003e\n        \u003cul class=\"detail-list\"\u003e\n            ${verification.attestations.map(att =\u003e `\n                \u003cli\u003e\n                    \u003cstrong\u003e${att.type}\u003c/strong\u003e\n                    \u003ca href=\"${att.uri}\" target=\"_blank\" rel=\"noopener noreferrer\"\u003e${att.uri}\u003c/a\u003e\n                \u003c/li\u003e\n            `).join('')}\n        \u003c/ul\u003e\n    `;\n}\n\nexport function renderImageDetail({ image, sboms, cves, verification }) {\n    return `\n        \u003ca href=\"#\" class=\"back-link\"\u003e\u0026larr; Back to Image List\u003c/a\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003ch2\u003eImage Details: \u003ccode style=\"font-size: 1.1rem;\"\u003e${image.digest.substring(0, 20)}...\u003c/code\u003e\u003c/h2\u003e\n            \u003cul class=\"detail-list\"\u003e\n                \u003cli\u003e\u003cstrong\u003eID\u003c/strong\u003e ${image.id}\u003c/li\u003e\n                \u003cli\u003e\u003cstrong\u003eTenant\u003c/strong\u003e ${image.tenant_namespace}\u003c/li\u003e\n                \u003cli\u003e\u003cstrong\u003eDigest\u003c/strong\u003e \u003ccode\u003e${image.digest}\u003c/code\u003e\u003c/li\u003e\n                \u003cli\u003e\u003cstrong\u003eTags\u003c/strong\u003e ${image.tags ? image.tags.map(tag =\u003e `\u003cspan class=\"tag\"\u003e${tag}\u003c/span\u003e`).join(' ') : 'None'}\u003c/li\u003e\n                \u003cli\u003e\u003cstrong\u003eSLSA Level\u003c/strong\u003e ${image.slsa_level}\u003c/li\u003e\n                \u003cli\u003e\u003cstrong\u003eCreated At\u003c/strong\u003e ${new Date(image.created_at).toLocaleString()}\u003c/li\u003e\n            \u003c/ul\u003e\n        \u003c/div\u003e\n\n        \u003cdiv class=\"grid\"\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003ch2\u003eCVE Findings\u003c/h2\u003e\n                ${renderCVEs(cves)}\n            \u003c/div\u003e\n            \u003cdiv class=\"card\"\u003e\n                \u003ch2\u003eSBOMs (Software Bill of Materials)\u003c/h2\u003e\n                ${renderSBOMs(sboms)}\n            \u003c/div\u003e\n        \u003c/div\u003e\n        \u003cdiv class=\"card\"\u003e\n            \u003ch2\u003eVerification \u0026 Attestations\u003c/h2\u003e\n            ${renderVerification(verification)}\n        \u003c/div\u003e\n    `;\n}\n```",
  "frontend/js/components/imageTable.js": "export function renderImageTable(images) {\n    if (!images || images.length === 0) {\n        return '\u003cdiv class=\"card\"\u003e\u003cp\u003eNo images found.\u003c/p\u003e\u003c/div\u003e';\n    }\n\n    const rows = images.map(image =\u003e `\n        \u003ctr\u003e\n            \u003ctd\u003e${image.id}\u003c/td\u003e\n            \u003ctd\u003e${image.tenant_namespace}\u003c/td\u003e\n            \u003ctd\u003e\u003ccode title=\"${image.digest}\"\u003e${image.digest.substring(0, 20)}...\u003c/code\u003e\u003c/td\u003e\n            \u003ctd\u003e${image.tags ? image.tags.map(tag =\u003e `\u003cspan class=\"tag\"\u003e${tag}\u003c/span\u003e`).join(' ') : ''}\u003c/td\u003e\n            \u003ctd\u003eSLSA ${image.slsa_level}\u003c/td\u003e\n            \u003ctd\u003e\u003ca href=\"#/images/${image.id}\" class=\"btn\"\u003eView Details\u003c/a\u003e\u003c/td\u003e\n        \u003c/tr\u003e\n    `).join('');\n\n    return `\n        \u003cdiv class=\"card\"\u003e\n            \u003ch2\u003eImage Explorer\u003c/h2\u003e\n            \u003ctable class=\"image-table\"\u003e\n                \u003cthead\u003e\n                    \u003ctr\u003e\n                        \u003cth\u003eID\u003c/th\u003e\n                        \u003cth\u003eTenant\u003c/th\u003e\n                        \u003cth\u003eDigest\u003c/th\u003e\n                        \u003cth\u003eTags\u003c/th\u003e\n                        \u003cth\u003eSLSA Level\u003c/th\u003e\n                        \u003cth\u003eActions\u003c/th\u003e\n                    \u003c/tr\u003e\n                \u003c/thead\u003e\n                \u003ctbody\u003e\n                    ${rows}\n                \u003c/tbody\u003e\n            \u003c/table\u003e\n        \u003c/div\u003e\n    `;\n}\n",
  "frontend/js/main.js": "import { apiClient } from './api.js';\nimport { renderImageTable } from './components/imageTable.js';\nimport { renderImageDetail } from './components/imageDetail.js';\n\nconst app = document.getElementById('app');\n\nconst showLoading = () =\u003e {\n    app.innerHTML = '\u003cp\u003eLoading...\u003c/p\u003e';\n};\n\nconst showError = (message) =\u003e {\n    app.innerHTML = `\u003cp style=\"color: red;\"\u003eError: ${message}\u003c/p\u003e`;\n};\n\nconst showImageListView = async () =\u003e {\n    showLoading();\n    try {\n        const images = await apiClient.getImages();\n        app.innerHTML = renderImageTable(images);\n    } catch (error) {\n        showError(error.message);\n    }\n};\n\nconst showImageDetailView = async (id) =\u003e {\n    showLoading();\n    try {\n        const [image, sboms, cves, verification] = await Promise.all([\n            apiClient.getImage(id),\n            apiClient.getImageSBOMs(id),\n            apiClient.getImageCVEs(id),\n            apiClient.getImageVerification(id),\n        ]);\n        app.innerHTML = renderImageDetail({ image, sboms, cves, verification });\n    } catch (error) {\n        showError(error.message);\n    }\n};\n\nconst router = () =\u003e {\n    const hash = window.location.hash;\n    const match = hash.match(/^#\\/images\\/(\\d+)$/);\n\n    if (match) {\n        const imageId = match[1];\n        showImageDetailView(imageId);\n    } else {\n        showImageListView();\n    }\n};\n\nwindow.addEventListener('hashchange', router);\nwindow.addEventListener('DOMContentLoaded', router);"
}